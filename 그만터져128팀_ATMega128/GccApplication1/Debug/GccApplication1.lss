
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000014aa  0000153e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016b  00800126  00800126  00001564  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d8  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a84  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000adf  00000000  00000000  00003634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00004114  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a01  00000000  00000000  00004448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d3  00000000  00000000  00004e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000551c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c0       	rjmp	.+350    	; 0x1a0 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	8c c0       	rjmp	.+280    	; 0x162 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ea       	ldi	r30, 0xAA	; 170
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 32       	cpi	r26, 0x26	; 38
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a6 e2       	ldi	r26, 0x26	; 38
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 39       	cpi	r26, 0x91	; 145
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	10 d5       	rcall	.+2592   	; 0xae4 <main>
      c4:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <SetDutyCW>:


// 모터에 PWM 값을 지정해 주는 함수 
void SetDutyCW(double v){
	
	while(TCNT1  == 0);
      ca:	2c b5       	in	r18, 0x2c	; 44
      cc:	3d b5       	in	r19, 0x2d	; 45
      ce:	23 2b       	or	r18, r19
      d0:	e1 f3       	breq	.-8      	; 0xca <SetDutyCW>

	int ocr = v * (200. / 24.) + 200;
      d2:	25 e5       	ldi	r18, 0x55	; 85
      d4:	35 e5       	ldi	r19, 0x55	; 85
      d6:	45 e0       	ldi	r20, 0x05	; 5
      d8:	51 e4       	ldi	r21, 0x41	; 65
      da:	0e 94 8b 09 	call	0x1316	; 0x1316 <__mulsf3>
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	48 e4       	ldi	r20, 0x48	; 72
      e4:	53 e4       	ldi	r21, 0x43	; 67
      e6:	60 d7       	rcall	.+3776   	; 0xfa8 <__addsf3>
      e8:	0e 94 a4 08 	call	0x1148	; 0x1148 <__fixsfsi>
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
      ec:	67 38       	cpi	r22, 0x87	; 135
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	78 07       	cpc	r23, r24
      f2:	34 f4       	brge	.+12     	; 0x100 <SetDutyCW+0x36>
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;	// OCR값을 10~390으로 제한
      f4:	6a 30       	cpi	r22, 0x0A	; 10
      f6:	71 05       	cpc	r23, r1
      f8:	2c f4       	brge	.+10     	; 0x104 <SetDutyCW+0x3a>
      fa:	6a e0       	ldi	r22, 0x0A	; 10
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	02 c0       	rjmp	.+4      	; 0x104 <SetDutyCW+0x3a>
	
	while(TCNT1  == 0);

	int ocr = v * (200. / 24.) + 200;
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
     100:	66 e8       	ldi	r22, 0x86	; 134
     102:	71 e0       	ldi	r23, 0x01	; 1
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;	// OCR값을 10~390으로 제한
	//OCR1A = OCR1B = ocr;
	
	OCR1A = OCR3B = ocr + 8;		//1 H
     104:	cb 01       	movw	r24, r22
     106:	08 96       	adiw	r24, 0x08	; 8
     108:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     10c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     110:	9b bd       	out	0x2b, r25	; 43
     112:	8a bd       	out	0x2a, r24	; 42
	OCR1B = OCR3A = ocr - 8;		//1 L
     114:	68 50       	subi	r22, 0x08	; 8
     116:	71 09       	sbc	r23, r1
     118:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     11c:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     120:	79 bd       	out	0x29, r23	; 41
     122:	68 bd       	out	0x28, r22	; 40
     124:	08 95       	ret

00000126 <InitLS7366>:
}


void InitLS7366(){
     126:	cf 93       	push	r28
	
	PORTB = 0x00;
     128:	18 ba       	out	0x18, r1	; 24
	SPI_MasterSend(SELECT_MDR0 | WR_REG);
     12a:	88 e8       	ldi	r24, 0x88	; 136
     12c:	32 d7       	rcall	.+3684   	; 0xf92 <SPI_MasterSend>
	SPI_MasterSend(X4_QUAD | FREE_RUN | DISABLE_INDEX | SYNCHRONOUS_INDEX |FILTER_CDF_1);
     12e:	83 e4       	ldi	r24, 0x43	; 67
     130:	30 d7       	rcall	.+3680   	; 0xf92 <SPI_MasterSend>
	PORTB = 0x01;
     132:	c1 e0       	ldi	r28, 0x01	; 1
     134:	c8 bb       	out	0x18, r28	; 24
	
	PORTB = 0x00;
	SPI_MasterSend(SELECT_MDR1 | WR_REG);
     136:	18 ba       	out	0x18, r1	; 24
     138:	80 e9       	ldi	r24, 0x90	; 144
	SPI_MasterSend(FOUR_BYTE_COUNT_MODE | ENABLE_COUNTING);
     13a:	2b d7       	rcall	.+3670   	; 0xf92 <SPI_MasterSend>
     13c:	80 e0       	ldi	r24, 0x00	; 0
	PORTB = 0x01;
     13e:	29 d7       	rcall	.+3666   	; 0xf92 <SPI_MasterSend>
	
	PORTB = 0x00;
     140:	c8 bb       	out	0x18, r28	; 24
	SPI_MasterSend(SELECT_CNTR | CLR_REG);
     142:	18 ba       	out	0x18, r1	; 24
     144:	80 e2       	ldi	r24, 0x20	; 32
     146:	25 d7       	rcall	.+3658   	; 0xf92 <SPI_MasterSend>
	PORTB = 0x01;
     148:	c8 bb       	out	0x18, r28	; 24
}
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <getADC>:


// ADC를 받아오는 함수: 전류센서 값
int getADC(char ch){

	ADMUX = (ADMUX & 0xf0) + ch;
     14e:	97 b1       	in	r25, 0x07	; 7
     150:	90 7f       	andi	r25, 0xF0	; 240
     152:	89 0f       	add	r24, r25
     154:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40;
     156:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));
     158:	34 9b       	sbis	0x06, 4	; 6
     15a:	fe cf       	rjmp	.-4      	; 0x158 <getADC+0xa>
	return ADC;
     15c:	84 b1       	in	r24, 0x04	; 4
     15e:	95 b1       	in	r25, 0x05	; 5
}
     160:	08 95       	ret

00000162 <__vector_18>:



// USART0번 인터럽트 >> UART0번을 통해 MFC로부터 값이 들어오면 발동
// 이제 여기서부터 ATMega128의 역할 시작
ISR(USART0_RX_vect){
     162:	1f 92       	push	r1
     164:	0f 92       	push	r0
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	0f 92       	push	r0
     16a:	11 24       	eor	r1, r1
     16c:	0b b6       	in	r0, 0x3b	; 59
     16e:	0f 92       	push	r0
     170:	8f 93       	push	r24
     172:	ef 93       	push	r30
     174:	ff 93       	push	r31

	g_buf[g_BufWriteCnt++] = UDR0;
     176:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <g_BufWriteCnt>
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	8e 0f       	add	r24, r30
     17e:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <g_BufWriteCnt>
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	8c b1       	in	r24, 0x0c	; 12
     186:	ea 5c       	subi	r30, 0xCA	; 202
     188:	fe 4f       	sbci	r31, 0xFE	; 254
     18a:	80 83       	st	Z, r24
	// 값이 들어오면 값이 들어오는 대로 버퍼에 값들 저장
}
     18c:	ff 91       	pop	r31
     18e:	ef 91       	pop	r30
     190:	8f 91       	pop	r24
     192:	0f 90       	pop	r0
     194:	0b be       	out	0x3b, r0	; 59
     196:	0f 90       	pop	r0
     198:	0f be       	out	0x3f, r0	; 63
     19a:	0f 90       	pop	r0
     19c:	1f 90       	pop	r1
     19e:	18 95       	reti

000001a0 <__vector_16>:



// 타이머 인터럽트 >> 본격적인 메인 코드 내용
//ISR(TIMER3_OVF_vect){
ISR(TIMER0_OVF_vect){
     1a0:	1f 92       	push	r1
     1a2:	0f 92       	push	r0
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	0f 92       	push	r0
     1a8:	11 24       	eor	r1, r1
     1aa:	0b b6       	in	r0, 0x3b	; 59
     1ac:	0f 92       	push	r0
     1ae:	4f 92       	push	r4
     1b0:	5f 92       	push	r5
     1b2:	6f 92       	push	r6
     1b4:	7f 92       	push	r7
     1b6:	8f 92       	push	r8
     1b8:	9f 92       	push	r9
     1ba:	af 92       	push	r10
     1bc:	bf 92       	push	r11
     1be:	cf 92       	push	r12
     1c0:	df 92       	push	r13
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	2f 93       	push	r18
     1c8:	3f 93       	push	r19
     1ca:	4f 93       	push	r20
     1cc:	5f 93       	push	r21
     1ce:	6f 93       	push	r22
     1d0:	7f 93       	push	r23
     1d2:	8f 93       	push	r24
     1d4:	9f 93       	push	r25
     1d6:	af 93       	push	r26
     1d8:	bf 93       	push	r27
     1da:	cf 93       	push	r28
     1dc:	ef 93       	push	r30
     1de:	ff 93       	push	r31
			
	TCNT0 = 256 - 125;			// 131로 설정함: 제어주기 2ms
     1e0:	83 e8       	ldi	r24, 0x83	; 131
     1e2:	82 bf       	out	0x32, r24	; 50
	//TCNT3 = 65536 - 125;		
	//Read LS7366
	int32_t cnt;
	
	PORTC = 0x01;
     1e4:	c1 e0       	ldi	r28, 0x01	; 1
     1e6:	c5 bb       	out	0x15, r28	; 21
	
	g_ADC = getADC(0);			// ADC 0번 값을 읽어 옴: ADC 0번 (PF0)은 전류센서 연결
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	b1 df       	rcall	.-158    	; 0x14e <getADC>
     1ec:	bc 01       	movw	r22, r24
     1ee:	99 0f       	add	r25, r25
     1f0:	88 0b       	sbc	r24, r24
     1f2:	99 0b       	sbc	r25, r25
     1f4:	dc d7       	rcall	.+4024   	; 0x11ae <__floatsisf>
     1f6:	60 93 73 02 	sts	0x0273, r22	; 0x800273 <g_ADC>
     1fa:	70 93 74 02 	sts	0x0274, r23	; 0x800274 <g_ADC+0x1>
     1fe:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <g_ADC+0x2>
     202:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <g_ADC+0x3>
	
	PORTB = 0x00;
     206:	18 ba       	out	0x18, r1	; 24
	SPI_MasterSend(SELECT_OTR | LOAD_REG);	// 0010 1000 | 1100 0000 = 1110 1000
     208:	88 ee       	ldi	r24, 0xE8	; 232
     20a:	c3 d6       	rcall	.+3462   	; 0xf92 <SPI_MasterSend>
	PORTB = 0x01;
     20c:	c8 bb       	out	0x18, r28	; 24
			
	PORTB = 0x00;
	SPI_MasterSend(SELECT_OTR | RD_REG);
     20e:	18 ba       	out	0x18, r1	; 24
     210:	88 e6       	ldi	r24, 0x68	; 104
	cnt = SPI_MasterRecv();		cnt = cnt<< 8;
     212:	bf d6       	rcall	.+3454   	; 0xf92 <SPI_MasterSend>
     214:	c3 d6       	rcall	.+3462   	; 0xf9c <SPI_MasterRecv>
     216:	c8 2e       	mov	r12, r24
     218:	d1 2c       	mov	r13, r1
     21a:	e1 2c       	mov	r14, r1
     21c:	f1 2c       	mov	r15, r1
     21e:	fe 2c       	mov	r15, r14
     220:	ed 2c       	mov	r14, r13
     222:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
     224:	cc 24       	eor	r12, r12
     226:	ba d6       	rcall	.+3444   	; 0xf9c <SPI_MasterRecv>
     228:	c8 2a       	or	r12, r24
     22a:	fe 2c       	mov	r15, r14
     22c:	ed 2c       	mov	r14, r13
     22e:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
     230:	cc 24       	eor	r12, r12
     232:	b4 d6       	rcall	.+3432   	; 0xf9c <SPI_MasterRecv>
     234:	c8 2a       	or	r12, r24
     236:	fe 2c       	mov	r15, r14
     238:	ed 2c       	mov	r14, r13
     23a:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();
     23c:	cc 24       	eor	r12, r12
     23e:	ae d6       	rcall	.+3420   	; 0xf9c <SPI_MasterRecv>
	PORTB = 0x01;
     240:	c8 bb       	out	0x18, r28	; 24
	g_Cnt = -cnt;
     242:	c8 2a       	or	r12, r24
     244:	f0 94       	com	r15
     246:	e0 94       	com	r14
     248:	d0 94       	com	r13
     24a:	c0 94       	com	r12
     24c:	c1 1c       	adc	r12, r1
     24e:	d1 1c       	adc	r13, r1
     250:	e1 1c       	adc	r14, r1
     252:	f1 1c       	adc	r15, r1
     254:	c0 92 7f 02 	sts	0x027F, r12	; 0x80027f <g_Cnt>
     258:	d0 92 80 02 	sts	0x0280, r13	; 0x800280 <g_Cnt+0x1>
     25c:	e0 92 81 02 	sts	0x0281, r14	; 0x800281 <g_Cnt+0x2>
     260:	f0 92 82 02 	sts	0x0282, r15	; 0x800282 <g_Cnt+0x3>
	
	PORTC = 0x03;
     264:	83 e0       	ldi	r24, 0x03	; 3
     266:	85 bb       	out	0x15, r24	; 21
	
	g_Pcur = (g_Cnt / (4096. * 81.)) * 2 * M_PI;		// 엔코더로 받은 현재 shaft의 위치 정보
     268:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <g_Cnt>
     26c:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <g_Cnt+0x1>
     270:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <g_Cnt+0x2>
     274:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <g_Cnt+0x3>
     278:	9a d7       	rcall	.+3892   	; 0x11ae <__floatsisf>
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	42 ea       	ldi	r20, 0xA2	; 162
     280:	58 e4       	ldi	r21, 0x48	; 72
     282:	fa d6       	rcall	.+3572   	; 0x1078 <__divsf3>
     284:	9b 01       	movw	r18, r22
     286:	ac 01       	movw	r20, r24
     288:	8f d6       	rcall	.+3358   	; 0xfa8 <__addsf3>
     28a:	2b ed       	ldi	r18, 0xDB	; 219
     28c:	3f e0       	ldi	r19, 0x0F	; 15
     28e:	49 e4       	ldi	r20, 0x49	; 73
     290:	50 e4       	ldi	r21, 0x40	; 64
     292:	0e 94 8b 09 	call	0x1316	; 0x1316 <__mulsf3>
     296:	60 93 84 02 	sts	0x0284, r22	; 0x800284 <g_Pcur>
     29a:	70 93 85 02 	sts	0x0285, r23	; 0x800285 <g_Pcur+0x1>
     29e:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <g_Pcur+0x2>
     2a2:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <g_Pcur+0x3>
	
	
	
	
	
	if((g_TimerCnt % 100) == 0){		// position control
     2a6:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <g_TimerCnt>
     2aa:	89 e2       	ldi	r24, 0x29	; 41
     2ac:	98 9f       	mul	r25, r24
     2ae:	81 2d       	mov	r24, r1
     2b0:	11 24       	eor	r1, r1
     2b2:	82 95       	swap	r24
     2b4:	8f 70       	andi	r24, 0x0F	; 15
     2b6:	24 e6       	ldi	r18, 0x64	; 100
     2b8:	82 9f       	mul	r24, r18
     2ba:	90 19       	sub	r25, r0
     2bc:	11 24       	eor	r1, r1
     2be:	91 11       	cpse	r25, r1
     2c0:	c6 c0       	rjmp	.+396    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		g_TimerCnt = 0;
     2c2:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <g_TimerCnt>
		//g_Pdes = -1.62;
		if(g_Pdes < 0) g_Pdes + 2*M_PI;	// 음수 target시 0~360으로 표현
     2c6:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <g_Pdes>
     2ca:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <g_Pdes+0x1>
     2ce:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_Pdes+0x2>
     2d2:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_Pdes+0x3>
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	a9 01       	movw	r20, r18
     2dc:	c9 d6       	rcall	.+3474   	; 0x1070 <__cmpsf2>
     2de:	88 23       	and	r24, r24
     2e0:	44 f4       	brge	.+16     	; 0x2f2 <__vector_16+0x152>
     2e2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <g_Pdes>
     2e6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <g_Pdes+0x1>
     2ea:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <g_Pdes+0x2>
     2ee:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <g_Pdes+0x3>
		
		g_Perr = g_Pdes - (g_Pcur);		// 목표 위치 값 - 현재 위치 값 = position error 
     2f2:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <g_Pdes>
     2f6:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <g_Pdes+0x1>
     2fa:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_Pdes+0x2>
     2fe:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_Pdes+0x3>
     302:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <g_Pcur>
     306:	30 91 85 02 	lds	r19, 0x0285	; 0x800285 <g_Pcur+0x1>
     30a:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <g_Pcur+0x2>
     30e:	50 91 87 02 	lds	r21, 0x0287	; 0x800287 <g_Pcur+0x3>
     312:	49 d6       	rcall	.+3218   	; 0xfa6 <__subsf3>
     314:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <g_Perr>
     318:	70 93 37 02 	sts	0x0237, r23	; 0x800237 <g_Perr+0x1>
     31c:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <g_Perr+0x2>
     320:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <g_Perr+0x3>
		g_Pderr = g_Perr - g_Ppre;		// 현재 에러 값 - 이전 에러 값 = position error_dot
     324:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <g_Perr>
     328:	70 91 37 02 	lds	r23, 0x0237	; 0x800237 <g_Perr+0x1>
     32c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <g_Perr+0x2>
     330:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <g_Perr+0x3>
     334:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <g_Ppre>
     338:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <g_Ppre+0x1>
     33c:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <g_Ppre+0x2>
     340:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <g_Ppre+0x3>
     344:	30 d6       	rcall	.+3168   	; 0xfa6 <__subsf3>
     346:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <g_Pderr>
     34a:	70 93 52 02 	sts	0x0252, r23	; 0x800252 <g_Pderr+0x1>
     34e:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <g_Pderr+0x2>
     352:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <g_Pderr+0x3>
		else if(g_Perr < -M_PI) {
			g_Perr += 2*M_PI;
		}
		*/
		
		g_pos_control = (double) g_Perr * Kp_p +  g_Pderr* Kd_p;		//PD 제어기
     356:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <g_Perr>
     35a:	70 91 37 02 	lds	r23, 0x0237	; 0x800237 <g_Perr+0x1>
     35e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <g_Perr+0x2>
     362:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <g_Perr+0x3>
     366:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Kp_p>
     36a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Kp_p+0x1>
     36e:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <Kp_p+0x2>
     372:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <Kp_p+0x3>
     376:	80 90 51 02 	lds	r8, 0x0251	; 0x800251 <g_Pderr>
     37a:	90 90 52 02 	lds	r9, 0x0252	; 0x800252 <g_Pderr+0x1>
     37e:	a0 90 53 02 	lds	r10, 0x0253	; 0x800253 <g_Pderr+0x2>
     382:	b0 90 54 02 	lds	r11, 0x0254	; 0x800254 <g_Pderr+0x3>
     386:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <Kd_p>
     38a:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <Kd_p+0x1>
     38e:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <Kd_p+0x2>
     392:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <Kd_p+0x3>
     396:	bf d7       	rcall	.+3966   	; 0x1316 <__mulsf3>
     398:	6b 01       	movw	r12, r22
     39a:	7c 01       	movw	r14, r24
     39c:	a3 01       	movw	r20, r6
     39e:	92 01       	movw	r18, r4
     3a0:	c5 01       	movw	r24, r10
     3a2:	b4 01       	movw	r22, r8
     3a4:	b8 d7       	rcall	.+3952   	; 0x1316 <__mulsf3>
     3a6:	9b 01       	movw	r18, r22
     3a8:	ac 01       	movw	r20, r24
     3aa:	c7 01       	movw	r24, r14
     3ac:	b6 01       	movw	r22, r12
     3ae:	fc d5       	rcall	.+3064   	; 0xfa8 <__addsf3>
     3b0:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <g_pos_control>
     3b4:	70 93 78 02 	sts	0x0278, r23	; 0x800278 <g_pos_control+0x1>
     3b8:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <g_pos_control+0x2>
     3bc:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <g_pos_control+0x3>
		// 위치 제어의 결과 값으로 속도 값이 도출됨

		// gear가 적용된 motor의 최대 속도는 642.65/81 [rad/sec]
		// 모터의 최대/최소 속도에 대한 saturation 설정
		if(g_pos_control > 642.65/81.){
     3c0:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <g_pos_control>
     3c4:	70 91 78 02 	lds	r23, 0x0278	; 0x800278 <g_pos_control+0x1>
     3c8:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <g_pos_control+0x2>
     3cc:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <g_pos_control+0x3>
     3d0:	2d ee       	ldi	r18, 0xED	; 237
     3d2:	32 ee       	ldi	r19, 0xE2	; 226
     3d4:	4d ef       	ldi	r20, 0xFD	; 253
     3d6:	50 e4       	ldi	r21, 0x40	; 64
     3d8:	9a d7       	rcall	.+3892   	; 0x130e <__gesf2>
     3da:	18 16       	cp	r1, r24
     3dc:	6c f4       	brge	.+26     	; 0x3f8 <__vector_16+0x258>
			g_pos_control = 642.65/81.;
     3de:	8d ee       	ldi	r24, 0xED	; 237
     3e0:	92 ee       	ldi	r25, 0xE2	; 226
     3e2:	ad ef       	ldi	r26, 0xFD	; 253
     3e4:	b0 e4       	ldi	r27, 0x40	; 64
     3e6:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <g_pos_control>
     3ea:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <g_pos_control+0x1>
     3ee:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <g_pos_control+0x2>
     3f2:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <g_pos_control+0x3>
		}
		else if(g_pos_control < -642.65/81.){
     3f6:	1b c0       	rjmp	.+54     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3f8:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <g_pos_control>
     3fc:	70 91 78 02 	lds	r23, 0x0278	; 0x800278 <g_pos_control+0x1>
     400:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <g_pos_control+0x2>
     404:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <g_pos_control+0x3>
     408:	2d ee       	ldi	r18, 0xED	; 237
     40a:	32 ee       	ldi	r19, 0xE2	; 226
     40c:	4d ef       	ldi	r20, 0xFD	; 253
     40e:	50 ec       	ldi	r21, 0xC0	; 192
     410:	2f d6       	rcall	.+3166   	; 0x1070 <__cmpsf2>
     412:	88 23       	and	r24, r24
     414:	64 f4       	brge	.+24     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			g_pos_control = -642.65/81.;
     416:	8d ee       	ldi	r24, 0xED	; 237
     418:	92 ee       	ldi	r25, 0xE2	; 226
     41a:	ad ef       	ldi	r26, 0xFD	; 253
     41c:	b0 ec       	ldi	r27, 0xC0	; 192
     41e:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <g_pos_control>
     422:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <g_pos_control+0x1>
     426:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <g_pos_control+0x2>
     42a:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <g_pos_control+0x3>
		}
		
		g_Ppre = g_Perr;		// 현재 위치 에러 값을 이전 위치 에러 값으로 저장
     42e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <g_Perr>
     432:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <g_Perr+0x1>
     436:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <g_Perr+0x2>
     43a:	b0 91 39 02 	lds	r27, 0x0239	; 0x800239 <g_Perr+0x3>
     43e:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <g_Ppre>
     442:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <g_Ppre+0x1>
     446:	a0 93 6c 02 	sts	0x026C, r26	; 0x80026c <g_Ppre+0x2>
     44a:	b0 93 6d 02 	sts	0x026D, r27	; 0x80026d <g_Ppre+0x3>
		
	}
	
	
	
	if((g_TimerCnt % 10) == 0){			// speed control
     44e:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <g_TimerCnt>
     452:	8d ec       	ldi	r24, 0xCD	; 205
     454:	28 9f       	mul	r18, r24
     456:	81 2d       	mov	r24, r1
     458:	11 24       	eor	r1, r1
     45a:	86 95       	lsr	r24
     45c:	86 95       	lsr	r24
     45e:	86 95       	lsr	r24
     460:	88 0f       	add	r24, r24
     462:	98 2f       	mov	r25, r24
     464:	99 0f       	add	r25, r25
     466:	99 0f       	add	r25, r25
     468:	89 0f       	add	r24, r25
     46a:	28 13       	cpse	r18, r24
     46c:	7a c1       	rjmp	.+756    	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
		
		// speed limit -Vlimit ~ +Vlimit
		// 목표 속도 값을 기준으로 saturation 설정
		
		if(g_pos_control > g_Vlimit){
     46e:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <g_pos_control>
     472:	70 91 78 02 	lds	r23, 0x0278	; 0x800278 <g_pos_control+0x1>
     476:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <g_pos_control+0x2>
     47a:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <g_pos_control+0x3>
     47e:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <g_Vlimit>
     482:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <g_Vlimit+0x1>
     486:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <g_Vlimit+0x2>
     48a:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <g_Vlimit+0x3>
     48e:	3f d7       	rcall	.+3710   	; 0x130e <__gesf2>
     490:	18 16       	cp	r1, r24
     492:	8c f4       	brge	.+34     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
			g_pos_control = g_Vlimit;
     494:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_Vlimit>
     498:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <g_Vlimit+0x1>
     49c:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <g_Vlimit+0x2>
     4a0:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <g_Vlimit+0x3>
     4a4:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <g_pos_control>
     4a8:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <g_pos_control+0x1>
     4ac:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <g_pos_control+0x2>
     4b0:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <g_pos_control+0x3>
     4b4:	27 c0       	rjmp	.+78     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
		}
		else if(g_pos_control < -g_Vlimit){
     4b6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_Vlimit>
     4ba:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <g_Vlimit+0x1>
     4be:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <g_Vlimit+0x2>
     4c2:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <g_Vlimit+0x3>
     4c6:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <g_pos_control>
     4ca:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <g_pos_control+0x1>
     4ce:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <g_pos_control+0x2>
     4d2:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <g_pos_control+0x3>
     4d6:	bc 01       	movw	r22, r24
     4d8:	cd 01       	movw	r24, r26
     4da:	90 58       	subi	r25, 0x80	; 128
     4dc:	18 d7       	rcall	.+3632   	; 0x130e <__gesf2>
     4de:	18 16       	cp	r1, r24
     4e0:	8c f4       	brge	.+34     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
			g_pos_control = -g_Vlimit;
     4e2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_Vlimit>
     4e6:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <g_Vlimit+0x1>
     4ea:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <g_Vlimit+0x2>
     4ee:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <g_Vlimit+0x3>
     4f2:	b0 58       	subi	r27, 0x80	; 128
     4f4:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <g_pos_control>
     4f8:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <g_pos_control+0x1>
     4fc:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <g_pos_control+0x2>
     500:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <g_pos_control+0x3>
		}
		
		// saturation 적용 된 최종 위치 제어 값을 목표 속도 값으로 저장 
		g_Vdes = g_pos_control; // [rad/sec]
     504:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <g_pos_control>
     508:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <g_pos_control+0x1>
     50c:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <g_pos_control+0x2>
     510:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <g_pos_control+0x3>
     514:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <g_Vdes>
     518:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <g_Vdes+0x1>
     51c:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <g_Vdes+0x2>
     520:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <g_Vdes+0x3>
		
		
		g_Vcur = (g_Pcur - g_Pvcur) / 0.005;	// (현재 엔코더 값 - 이전 엔코더 값) / 0.005초 -> 현재속도 [rad/sec]
     524:	60 91 84 02 	lds	r22, 0x0284	; 0x800284 <g_Pcur>
     528:	70 91 85 02 	lds	r23, 0x0285	; 0x800285 <g_Pcur+0x1>
     52c:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <g_Pcur+0x2>
     530:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <g_Pcur+0x3>
     534:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <g_Pvcur>
     538:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <g_Pvcur+0x1>
     53c:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <g_Pvcur+0x2>
     540:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <g_Pvcur+0x3>
     544:	30 d5       	rcall	.+2656   	; 0xfa6 <__subsf3>
     546:	2a e0       	ldi	r18, 0x0A	; 10
     548:	37 ed       	ldi	r19, 0xD7	; 215
     54a:	43 ea       	ldi	r20, 0xA3	; 163
     54c:	5b e3       	ldi	r21, 0x3B	; 59
     54e:	94 d5       	rcall	.+2856   	; 0x1078 <__divsf3>
     550:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <g_Vcur>
     554:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <g_Vcur+0x1>
     558:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <g_Vcur+0x2>
     55c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <g_Vcur+0x3>
		g_Pvcur = g_Pcur;						// 현재 엔코더 값을 이전 엔코더 값으로 저장
     560:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <g_Pcur>
     564:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <g_Pcur+0x1>
     568:	a0 91 86 02 	lds	r26, 0x0286	; 0x800286 <g_Pcur+0x2>
     56c:	b0 91 87 02 	lds	r27, 0x0287	; 0x800287 <g_Pcur+0x3>
     570:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <g_Pvcur>
     574:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <g_Pvcur+0x1>
     578:	a0 93 8a 02 	sts	0x028A, r26	; 0x80028a <g_Pvcur+0x2>
     57c:	b0 93 8b 02 	sts	0x028B, r27	; 0x80028b <g_Pvcur+0x3>
		
		g_Verr = g_Vdes - g_Vcur;  // (목표 속도 값 - 현재 속도 값) = 속도 값 에러
     580:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <g_Vdes>
     584:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <g_Vdes+0x1>
     588:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <g_Vdes+0x2>
     58c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <g_Vdes+0x3>
     590:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <g_Vcur>
     594:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <g_Vcur+0x1>
     598:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <g_Vcur+0x2>
     59c:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <g_Vcur+0x3>
     5a0:	02 d5       	rcall	.+2564   	; 0xfa6 <__subsf3>
     5a2:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <g_Verr>
     5a6:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <g_Verr+0x1>
     5aa:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <g_Verr+0x2>
     5ae:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <g_Verr+0x3>
		
		g_vel_control = g_Verr * Kp_s + g_Verr_sum * Ki_s * 0.005;		// PI 제어기
     5b2:	80 90 7b 02 	lds	r8, 0x027B	; 0x80027b <g_Verr>
     5b6:	90 90 7c 02 	lds	r9, 0x027C	; 0x80027c <g_Verr+0x1>
     5ba:	a0 90 7d 02 	lds	r10, 0x027D	; 0x80027d <g_Verr+0x2>
     5be:	b0 90 7e 02 	lds	r11, 0x027E	; 0x80027e <g_Verr+0x3>
     5c2:	40 90 0c 01 	lds	r4, 0x010C	; 0x80010c <Kp_s>
     5c6:	50 90 0d 01 	lds	r5, 0x010D	; 0x80010d <Kp_s+0x1>
     5ca:	60 90 0e 01 	lds	r6, 0x010E	; 0x80010e <Kp_s+0x2>
     5ce:	70 90 0f 01 	lds	r7, 0x010F	; 0x80010f <Kp_s+0x3>
     5d2:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <g_Verr_sum>
     5d6:	70 91 4d 02 	lds	r23, 0x024D	; 0x80024d <g_Verr_sum+0x1>
     5da:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <g_Verr_sum+0x2>
     5de:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <g_Verr_sum+0x3>
     5e2:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <Ki_s>
     5e6:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <Ki_s+0x1>
     5ea:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <Ki_s+0x2>
     5ee:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <Ki_s+0x3>
     5f2:	91 d6       	rcall	.+3362   	; 0x1316 <__mulsf3>
     5f4:	2a e0       	ldi	r18, 0x0A	; 10
     5f6:	37 ed       	ldi	r19, 0xD7	; 215
     5f8:	43 ea       	ldi	r20, 0xA3	; 163
     5fa:	5b e3       	ldi	r21, 0x3B	; 59
     5fc:	8c d6       	rcall	.+3352   	; 0x1316 <__mulsf3>
     5fe:	6b 01       	movw	r12, r22
     600:	7c 01       	movw	r14, r24
     602:	a3 01       	movw	r20, r6
     604:	92 01       	movw	r18, r4
     606:	c5 01       	movw	r24, r10
     608:	b4 01       	movw	r22, r8
     60a:	85 d6       	rcall	.+3338   	; 0x1316 <__mulsf3>
     60c:	9b 01       	movw	r18, r22
     60e:	ac 01       	movw	r20, r24
     610:	c7 01       	movw	r24, r14
     612:	b6 01       	movw	r22, r12
     614:	c9 d4       	rcall	.+2450   	; 0xfa8 <__addsf3>
     616:	60 93 6e 02 	sts	0x026E, r22	; 0x80026e <g_vel_control>
     61a:	70 93 6f 02 	sts	0x026F, r23	; 0x80026f <g_vel_control+0x1>
     61e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <g_vel_control+0x2>
     622:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <g_vel_control+0x3>
		// 속도 제어의 결과 값으로 전류 값이 도출됨
		
		
		g_Verr_sum += g_Verr;	// 속도 값에 대한 에러 값을 계속 누적
     626:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <g_Verr>
     62a:	70 91 7c 02 	lds	r23, 0x027C	; 0x80027c <g_Verr+0x1>
     62e:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <g_Verr+0x2>
     632:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <g_Verr+0x3>
     636:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <g_Verr_sum>
     63a:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <g_Verr_sum+0x1>
     63e:	40 91 4e 02 	lds	r20, 0x024E	; 0x80024e <g_Verr_sum+0x2>
     642:	50 91 4f 02 	lds	r21, 0x024F	; 0x80024f <g_Verr_sum+0x3>
     646:	b0 d4       	rcall	.+2400   	; 0xfa8 <__addsf3>
     648:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <g_Verr_sum>
     64c:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <g_Verr_sum+0x1>
     650:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <g_Verr_sum+0x2>
     654:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <g_Verr_sum+0x3>
		
		// 최대 허용 전류 값에 대한 saturation & anti-windup
		if(g_vel_control > 2.08){
     658:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <g_vel_control>
     65c:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <g_vel_control+0x1>
     660:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <g_vel_control+0x2>
     664:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <g_vel_control+0x3>
     668:	28 eb       	ldi	r18, 0xB8	; 184
     66a:	3e e1       	ldi	r19, 0x1E	; 30
     66c:	45 e0       	ldi	r20, 0x05	; 5
     66e:	50 e4       	ldi	r21, 0x40	; 64
     670:	4e d6       	rcall	.+3228   	; 0x130e <__gesf2>
     672:	18 16       	cp	r1, r24
			g_Verr_sum -= (g_vel_control - 2.08) * 1. / 2.5042;	//  anti windup gain은 1/Kps
     674:	a4 f5       	brge	.+104    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     676:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <g_vel_control>
     67a:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <g_vel_control+0x1>
     67e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <g_vel_control+0x2>
     682:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <g_vel_control+0x3>
     686:	c0 90 4c 02 	lds	r12, 0x024C	; 0x80024c <g_Verr_sum>
     68a:	d0 90 4d 02 	lds	r13, 0x024D	; 0x80024d <g_Verr_sum+0x1>
     68e:	e0 90 4e 02 	lds	r14, 0x024E	; 0x80024e <g_Verr_sum+0x2>
     692:	f0 90 4f 02 	lds	r15, 0x024F	; 0x80024f <g_Verr_sum+0x3>
     696:	28 eb       	ldi	r18, 0xB8	; 184
     698:	3e e1       	ldi	r19, 0x1E	; 30
     69a:	45 e0       	ldi	r20, 0x05	; 5
     69c:	50 e4       	ldi	r21, 0x40	; 64
     69e:	83 d4       	rcall	.+2310   	; 0xfa6 <__subsf3>
     6a0:	20 ed       	ldi	r18, 0xD0	; 208
     6a2:	34 e4       	ldi	r19, 0x44	; 68
     6a4:	40 e2       	ldi	r20, 0x20	; 32
     6a6:	50 e4       	ldi	r21, 0x40	; 64
     6a8:	e7 d4       	rcall	.+2510   	; 0x1078 <__divsf3>
     6aa:	9b 01       	movw	r18, r22
     6ac:	ac 01       	movw	r20, r24
     6ae:	c7 01       	movw	r24, r14
     6b0:	b6 01       	movw	r22, r12
     6b2:	79 d4       	rcall	.+2290   	; 0xfa6 <__subsf3>
     6b4:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <g_Verr_sum>
     6b8:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <g_Verr_sum+0x1>
     6bc:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <g_Verr_sum+0x2>
     6c0:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <g_Verr_sum+0x3>
			g_vel_control = 2.08;
     6c4:	88 eb       	ldi	r24, 0xB8	; 184
     6c6:	9e e1       	ldi	r25, 0x1E	; 30
     6c8:	a5 e0       	ldi	r26, 0x05	; 5
     6ca:	b0 e4       	ldi	r27, 0x40	; 64
     6cc:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <g_vel_control>
     6d0:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <g_vel_control+0x1>
     6d4:	a0 93 70 02 	sts	0x0270, r26	; 0x800270 <g_vel_control+0x2>
     6d8:	b0 93 71 02 	sts	0x0271, r27	; 0x800271 <g_vel_control+0x3>
		}
		else if(g_vel_control < -2.08){
     6dc:	42 c0       	rjmp	.+132    	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
     6de:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <g_vel_control>
     6e2:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <g_vel_control+0x1>
     6e6:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <g_vel_control+0x2>
     6ea:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <g_vel_control+0x3>
     6ee:	28 eb       	ldi	r18, 0xB8	; 184
     6f0:	3e e1       	ldi	r19, 0x1E	; 30
     6f2:	45 e0       	ldi	r20, 0x05	; 5
     6f4:	50 ec       	ldi	r21, 0xC0	; 192
     6f6:	bc d4       	rcall	.+2424   	; 0x1070 <__cmpsf2>
			g_Verr_sum -= (g_vel_control + 2.08) * 1. / 2.5042; //  anti windup gain은 1/Kps
     6f8:	88 23       	and	r24, r24
     6fa:	9c f5       	brge	.+102    	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
     6fc:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <g_vel_control>
     700:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <g_vel_control+0x1>
     704:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <g_vel_control+0x2>
     708:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <g_vel_control+0x3>
     70c:	c0 90 4c 02 	lds	r12, 0x024C	; 0x80024c <g_Verr_sum>
     710:	d0 90 4d 02 	lds	r13, 0x024D	; 0x80024d <g_Verr_sum+0x1>
     714:	e0 90 4e 02 	lds	r14, 0x024E	; 0x80024e <g_Verr_sum+0x2>
     718:	f0 90 4f 02 	lds	r15, 0x024F	; 0x80024f <g_Verr_sum+0x3>
     71c:	28 eb       	ldi	r18, 0xB8	; 184
     71e:	3e e1       	ldi	r19, 0x1E	; 30
     720:	45 e0       	ldi	r20, 0x05	; 5
     722:	50 e4       	ldi	r21, 0x40	; 64
     724:	41 d4       	rcall	.+2178   	; 0xfa8 <__addsf3>
     726:	20 ed       	ldi	r18, 0xD0	; 208
     728:	34 e4       	ldi	r19, 0x44	; 68
     72a:	40 e2       	ldi	r20, 0x20	; 32
     72c:	50 e4       	ldi	r21, 0x40	; 64
     72e:	a4 d4       	rcall	.+2376   	; 0x1078 <__divsf3>
     730:	9b 01       	movw	r18, r22
     732:	ac 01       	movw	r20, r24
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	36 d4       	rcall	.+2156   	; 0xfa6 <__subsf3>
     73a:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <g_Verr_sum>
     73e:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <g_Verr_sum+0x1>
     742:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <g_Verr_sum+0x2>
     746:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <g_Verr_sum+0x3>
			g_vel_control = -2.08;
     74a:	88 eb       	ldi	r24, 0xB8	; 184
     74c:	9e e1       	ldi	r25, 0x1E	; 30
     74e:	a5 e0       	ldi	r26, 0x05	; 5
     750:	b0 ec       	ldi	r27, 0xC0	; 192
     752:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <g_vel_control>
     756:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <g_vel_control+0x1>
     75a:	a0 93 70 02 	sts	0x0270, r26	; 0x800270 <g_vel_control+0x2>
     75e:	b0 93 71 02 	sts	0x0271, r27	; 0x800271 <g_vel_control+0x3>
		}

	}
	g_TimerCnt++;
     762:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <g_TimerCnt>
     766:	8f 5f       	subi	r24, 0xFF	; 255
     768:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <g_TimerCnt>
	
	// torque control 		2000Hz
	//g_Cdes = -0.1;	// current target
	
	g_Cdes = -g_vel_control;		// 속도 제어 값의 부호를 반전시켜 목표 전류 값으로 다시 저장 
     76c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <g_vel_control>
     770:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <g_vel_control+0x1>
     774:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <g_vel_control+0x2>
     778:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <g_vel_control+0x3>
     77c:	b0 58       	subi	r27, 0x80	; 128
     77e:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <g_Cdes>
     782:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <g_Cdes+0x1>
     786:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <g_Cdes+0x2>
     78a:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <g_Cdes+0x3>

	// 전류 값에 대한 saturation
	if(g_Cdes > g_Climit)
     78e:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <g_Cdes>
     792:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <g_Cdes+0x1>
     796:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <g_Cdes+0x2>
     79a:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <g_Cdes+0x3>
     79e:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_Climit>
     7a2:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_Climit+0x1>
     7a6:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <g_Climit+0x2>
     7aa:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <g_Climit+0x3>
     7ae:	af d5       	rcall	.+2910   	; 0x130e <__gesf2>
     7b0:	18 16       	cp	r1, r24
     7b2:	8c f4       	brge	.+34     	; 0x7d6 <__LOCK_REGION_LENGTH__+0x3d6>
		g_Cdes = g_Climit;
     7b4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
     7b8:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     7bc:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     7c0:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     7c4:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <g_Cdes>
     7c8:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <g_Cdes+0x1>
     7cc:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <g_Cdes+0x2>
     7d0:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <g_Cdes+0x3>
	else if(g_Cdes < -g_Climit)
     7d4:	27 c0       	rjmp	.+78     	; 0x824 <__LOCK_REGION_LENGTH__+0x424>
     7d6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
     7da:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     7de:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     7e2:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     7e6:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <g_Cdes>
     7ea:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <g_Cdes+0x1>
     7ee:	40 91 4a 02 	lds	r20, 0x024A	; 0x80024a <g_Cdes+0x2>
     7f2:	50 91 4b 02 	lds	r21, 0x024B	; 0x80024b <g_Cdes+0x3>
     7f6:	bc 01       	movw	r22, r24
     7f8:	cd 01       	movw	r24, r26
     7fa:	90 58       	subi	r25, 0x80	; 128
     7fc:	88 d5       	rcall	.+2832   	; 0x130e <__gesf2>
     7fe:	18 16       	cp	r1, r24
		g_Cdes = -g_Climit;				
     800:	8c f4       	brge	.+34     	; 0x824 <__LOCK_REGION_LENGTH__+0x424>
     802:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
     806:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     80a:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     80e:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     812:	b0 58       	subi	r27, 0x80	; 128
     814:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <g_Cdes>
     818:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <g_Cdes+0x1>
	
	
	g_Ccur = -( ((g_ADC / 1024. * 5.) - 2.488 + 0.005) * 10.);		// 전류 센서를 통해 받은 전류 값(ADC)을 통해 현재 전류 값 계산
     81c:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <g_Cdes+0x2>
     820:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <g_Cdes+0x3>
     824:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <g_ADC>
     828:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <g_ADC+0x1>
     82c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <g_ADC+0x2>
     830:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <g_ADC+0x3>
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e8       	ldi	r20, 0x80	; 128
     83a:	5a e3       	ldi	r21, 0x3A	; 58
     83c:	6c d5       	rcall	.+2776   	; 0x1316 <__mulsf3>
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 ea       	ldi	r20, 0xA0	; 160
     844:	50 e4       	ldi	r21, 0x40	; 64
     846:	67 d5       	rcall	.+2766   	; 0x1316 <__mulsf3>
     848:	24 e6       	ldi	r18, 0x64	; 100
     84a:	3b e3       	ldi	r19, 0x3B	; 59
     84c:	4f e1       	ldi	r20, 0x1F	; 31
     84e:	50 e4       	ldi	r21, 0x40	; 64
     850:	aa d3       	rcall	.+1876   	; 0xfa6 <__subsf3>
     852:	2a e0       	ldi	r18, 0x0A	; 10
     854:	37 ed       	ldi	r19, 0xD7	; 215
     856:	43 ea       	ldi	r20, 0xA3	; 163
     858:	5b e3       	ldi	r21, 0x3B	; 59
     85a:	a6 d3       	rcall	.+1868   	; 0xfa8 <__addsf3>
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	40 e2       	ldi	r20, 0x20	; 32
     862:	51 e4       	ldi	r21, 0x41	; 65
     864:	58 d5       	rcall	.+2736   	; 0x1316 <__mulsf3>
     866:	dc 01       	movw	r26, r24
     868:	cb 01       	movw	r24, r22
     86a:	b0 58       	subi	r27, 0x80	; 128
     86c:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <g_Ccur>
     870:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <g_Ccur+0x1>
     874:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <g_Ccur+0x2>
     878:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <g_Ccur+0x3>
	g_Cerr = g_Cdes - g_Ccur;				// (목표 전류 값 - 현재 전류 값) = 전류 값 에러
     87c:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <g_Cdes>
     880:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <g_Cdes+0x1>
     884:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <g_Cdes+0x2>
     888:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <g_Cdes+0x3>
     88c:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <g_Ccur>
     890:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <g_Ccur+0x1>
     894:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <g_Ccur+0x2>
     898:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <g_Ccur+0x3>
     89c:	84 d3       	rcall	.+1800   	; 0xfa6 <__subsf3>
     89e:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <g_Cerr>
     8a2:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <g_Cerr+0x1>
     8a6:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <g_Cerr+0x2>
     8aa:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <g_Cerr+0x3>

	cur_control = g_Cerr * Kp_c + g_Cerr_sum * Ki_c * 0.0005;	// PI 제어기:  200hz이므로 0.0005초에 한번 이므로 적분부에 0.005를 곱해줌
     8ae:	80 90 3a 02 	lds	r8, 0x023A	; 0x80023a <g_Cerr>
     8b2:	90 90 3b 02 	lds	r9, 0x023B	; 0x80023b <g_Cerr+0x1>
     8b6:	a0 90 3c 02 	lds	r10, 0x023C	; 0x80023c <g_Cerr+0x2>
     8ba:	b0 90 3d 02 	lds	r11, 0x023D	; 0x80023d <g_Cerr+0x3>
     8be:	40 90 04 01 	lds	r4, 0x0104	; 0x800104 <Kp_c>
     8c2:	50 90 05 01 	lds	r5, 0x0105	; 0x800105 <Kp_c+0x1>
     8c6:	60 90 06 01 	lds	r6, 0x0106	; 0x800106 <Kp_c+0x2>
     8ca:	70 90 07 01 	lds	r7, 0x0107	; 0x800107 <Kp_c+0x3>
     8ce:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <g_Cerr_sum>
     8d2:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <g_Cerr_sum+0x1>
     8d6:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <g_Cerr_sum+0x2>
     8da:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <g_Cerr_sum+0x3>
     8de:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8e2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8e6:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     8ea:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     8ee:	13 d5       	rcall	.+2598   	; 0x1316 <__mulsf3>
     8f0:	2f e6       	ldi	r18, 0x6F	; 111
     8f2:	32 e1       	ldi	r19, 0x12	; 18
     8f4:	43 e0       	ldi	r20, 0x03	; 3
     8f6:	5a e3       	ldi	r21, 0x3A	; 58
     8f8:	0e d5       	rcall	.+2588   	; 0x1316 <__mulsf3>
     8fa:	6b 01       	movw	r12, r22
     8fc:	7c 01       	movw	r14, r24
     8fe:	a3 01       	movw	r20, r6
     900:	92 01       	movw	r18, r4
     902:	c5 01       	movw	r24, r10
     904:	b4 01       	movw	r22, r8
     906:	07 d5       	rcall	.+2574   	; 0x1316 <__mulsf3>
     908:	9b 01       	movw	r18, r22
     90a:	ac 01       	movw	r20, r24
     90c:	c7 01       	movw	r24, r14
     90e:	b6 01       	movw	r22, r12
     910:	4b d3       	rcall	.+1686   	; 0xfa8 <__addsf3>
     912:	1a d4       	rcall	.+2100   	; 0x1148 <__fixsfsi>
     914:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <__data_end+0x1>
	cur_control += g_Vcur * 0.0683;				// 역기전력 보상
     918:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <__data_end>
     91c:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <g_Vcur>
     920:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <g_Vcur+0x1>
     924:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_Vcur+0x2>
     928:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <g_Vcur+0x3>
     92c:	e0 90 26 01 	lds	r14, 0x0126	; 0x800126 <__data_end>
     930:	f0 90 27 01 	lds	r15, 0x0127	; 0x800127 <__data_end+0x1>
     934:	2f ed       	ldi	r18, 0xDF	; 223
     936:	30 ee       	ldi	r19, 0xE0	; 224
     938:	4b e8       	ldi	r20, 0x8B	; 139
     93a:	5d e3       	ldi	r21, 0x3D	; 61
     93c:	ec d4       	rcall	.+2520   	; 0x1316 <__mulsf3>
     93e:	4b 01       	movw	r8, r22
     940:	5c 01       	movw	r10, r24
     942:	b7 01       	movw	r22, r14
     944:	ff 0c       	add	r15, r15
     946:	88 0b       	sbc	r24, r24
     948:	99 0b       	sbc	r25, r25
     94a:	31 d4       	rcall	.+2146   	; 0x11ae <__floatsisf>
     94c:	9b 01       	movw	r18, r22
     94e:	ac 01       	movw	r20, r24
     950:	c5 01       	movw	r24, r10
     952:	b4 01       	movw	r22, r8
     954:	29 d3       	rcall	.+1618   	; 0xfa8 <__addsf3>
     956:	f8 d3       	rcall	.+2032   	; 0x1148 <__fixsfsi>
     958:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <__data_end+0x1>
     95c:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <__data_end>
	
	g_Cerr_sum += g_Cerr;		// current error sum(I-term)
     960:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <g_Cerr>
     964:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <g_Cerr+0x1>
     968:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <g_Cerr+0x2>
     96c:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <g_Cerr+0x3>
     970:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <g_Cerr_sum>
     974:	30 91 8d 02 	lds	r19, 0x028D	; 0x80028d <g_Cerr_sum+0x1>
     978:	40 91 8e 02 	lds	r20, 0x028E	; 0x80028e <g_Cerr_sum+0x2>
     97c:	50 91 8f 02 	lds	r21, 0x028F	; 0x80028f <g_Cerr_sum+0x3>
     980:	13 d3       	rcall	.+1574   	; 0xfa8 <__addsf3>
     982:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <g_Cerr_sum>
     986:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <g_Cerr_sum+0x1>
     98a:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <g_Cerr_sum+0x2>
	
	
	//I-term anti-wind up   누적 오차 해소
	if(cur_control >= 24){									//최대 출력 24V
     98e:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <g_Cerr_sum+0x3>
     992:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     996:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
		g_Cerr_sum -= (cur_control - 24.) * 1. /  Kp_c;		// anti windup 계수 1/3kp
     99a:	48 97       	sbiw	r24, 0x18	; 24
     99c:	ac f1       	brlt	.+106    	; 0xa08 <__LOCK_REGION_LENGTH__+0x608>
     99e:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
     9a2:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
     9a6:	80 90 04 01 	lds	r8, 0x0104	; 0x800104 <Kp_c>
     9aa:	90 90 05 01 	lds	r9, 0x0105	; 0x800105 <Kp_c+0x1>
     9ae:	a0 90 06 01 	lds	r10, 0x0106	; 0x800106 <Kp_c+0x2>
     9b2:	b0 90 07 01 	lds	r11, 0x0107	; 0x800107 <Kp_c+0x3>
     9b6:	c0 90 8c 02 	lds	r12, 0x028C	; 0x80028c <g_Cerr_sum>
     9ba:	d0 90 8d 02 	lds	r13, 0x028D	; 0x80028d <g_Cerr_sum+0x1>
     9be:	e0 90 8e 02 	lds	r14, 0x028E	; 0x80028e <g_Cerr_sum+0x2>
     9c2:	f0 90 8f 02 	lds	r15, 0x028F	; 0x80028f <g_Cerr_sum+0x3>
     9c6:	07 2e       	mov	r0, r23
     9c8:	00 0c       	add	r0, r0
     9ca:	88 0b       	sbc	r24, r24
     9cc:	99 0b       	sbc	r25, r25
     9ce:	ef d3       	rcall	.+2014   	; 0x11ae <__floatsisf>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 ec       	ldi	r20, 0xC0	; 192
     9d6:	51 e4       	ldi	r21, 0x41	; 65
     9d8:	e6 d2       	rcall	.+1484   	; 0xfa6 <__subsf3>
     9da:	a5 01       	movw	r20, r10
     9dc:	94 01       	movw	r18, r8
     9de:	4c d3       	rcall	.+1688   	; 0x1078 <__divsf3>
     9e0:	9b 01       	movw	r18, r22
     9e2:	ac 01       	movw	r20, r24
     9e4:	c7 01       	movw	r24, r14
     9e6:	b6 01       	movw	r22, r12
     9e8:	de d2       	rcall	.+1468   	; 0xfa6 <__subsf3>
     9ea:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <g_Cerr_sum>
     9ee:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <g_Cerr_sum+0x1>
     9f2:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <g_Cerr_sum+0x2>
		cur_control = 24;
     9f6:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <g_Cerr_sum+0x3>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
     a02:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
	}
	else if(cur_control < -24){
     a06:	3b c0       	rjmp	.+118    	; 0xa7e <__LOCK_REGION_LENGTH__+0x67e>
     a08:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     a0c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
     a10:	88 3e       	cpi	r24, 0xE8	; 232
		g_Cerr_sum -= (cur_control + 24.) * 1. / Kp_c;		// anti windup 계수 1/3kp
     a12:	9f 4f       	sbci	r25, 0xFF	; 255
     a14:	a4 f5       	brge	.+104    	; 0xa7e <__LOCK_REGION_LENGTH__+0x67e>
     a16:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
     a1a:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
     a1e:	80 90 04 01 	lds	r8, 0x0104	; 0x800104 <Kp_c>
     a22:	90 90 05 01 	lds	r9, 0x0105	; 0x800105 <Kp_c+0x1>
     a26:	a0 90 06 01 	lds	r10, 0x0106	; 0x800106 <Kp_c+0x2>
     a2a:	b0 90 07 01 	lds	r11, 0x0107	; 0x800107 <Kp_c+0x3>
     a2e:	c0 90 8c 02 	lds	r12, 0x028C	; 0x80028c <g_Cerr_sum>
     a32:	d0 90 8d 02 	lds	r13, 0x028D	; 0x80028d <g_Cerr_sum+0x1>
     a36:	e0 90 8e 02 	lds	r14, 0x028E	; 0x80028e <g_Cerr_sum+0x2>
     a3a:	f0 90 8f 02 	lds	r15, 0x028F	; 0x80028f <g_Cerr_sum+0x3>
     a3e:	07 2e       	mov	r0, r23
     a40:	00 0c       	add	r0, r0
     a42:	88 0b       	sbc	r24, r24
     a44:	99 0b       	sbc	r25, r25
     a46:	b3 d3       	rcall	.+1894   	; 0x11ae <__floatsisf>
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 ec       	ldi	r20, 0xC0	; 192
     a4e:	51 e4       	ldi	r21, 0x41	; 65
     a50:	ab d2       	rcall	.+1366   	; 0xfa8 <__addsf3>
     a52:	a5 01       	movw	r20, r10
     a54:	94 01       	movw	r18, r8
     a56:	10 d3       	rcall	.+1568   	; 0x1078 <__divsf3>
     a58:	9b 01       	movw	r18, r22
     a5a:	ac 01       	movw	r20, r24
     a5c:	c7 01       	movw	r24, r14
     a5e:	b6 01       	movw	r22, r12
     a60:	a2 d2       	rcall	.+1348   	; 0xfa6 <__subsf3>
     a62:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <g_Cerr_sum>
     a66:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <g_Cerr_sum+0x1>
     a6a:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <g_Cerr_sum+0x2>
     a6e:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <g_Cerr_sum+0x3>
		cur_control = -24;
     a72:	88 ee       	ldi	r24, 0xE8	; 232
     a74:	9f ef       	ldi	r25, 0xFF	; 255
     a76:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
     a7a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
	}
	

	// 최종적으로 전류 제어 값으로 전압 값을 계산하기 위해 값을 넘겨 줌
	SetDutyCW(cur_control);				// target Voltage
     a7e:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
     a82:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
     a86:	07 2e       	mov	r0, r23
     a88:	00 0c       	add	r0, r0
     a8a:	88 0b       	sbc	r24, r24
     a8c:	99 0b       	sbc	r25, r25
     a8e:	8f d3       	rcall	.+1822   	; 0x11ae <__floatsisf>
     a90:	1c db       	rcall	.-2504   	; 0xca <SetDutyCW>
     a92:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <g_SendFlag>
	
	

	////////////////////////////// 제어 종료 //////////////////////////
	
	g_SendFlag++;
     a96:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <g_SendFlag+0x1>
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <g_SendFlag+0x1>
     aa0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <g_SendFlag>
     aa4:	ff 91       	pop	r31
     aa6:	ef 91       	pop	r30

}
     aa8:	cf 91       	pop	r28
     aaa:	bf 91       	pop	r27
     aac:	af 91       	pop	r26
     aae:	9f 91       	pop	r25
     ab0:	8f 91       	pop	r24
     ab2:	7f 91       	pop	r23
     ab4:	6f 91       	pop	r22
     ab6:	5f 91       	pop	r21
     ab8:	4f 91       	pop	r20
     aba:	3f 91       	pop	r19
     abc:	2f 91       	pop	r18
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	df 90       	pop	r13
     ac4:	cf 90       	pop	r12
     ac6:	bf 90       	pop	r11
     ac8:	af 90       	pop	r10
     aca:	9f 90       	pop	r9
     acc:	8f 90       	pop	r8
     ace:	7f 90       	pop	r7
     ad0:	6f 90       	pop	r6
     ad2:	5f 90       	pop	r5
     ad4:	4f 90       	pop	r4
     ad6:	0f 90       	pop	r0
     ad8:	0b be       	out	0x3b, r0	; 59
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	0f 90       	pop	r0
     ae0:	1f 90       	pop	r1
     ae2:	18 95       	reti

00000ae4 <main>:
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29



int main(void){
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	64 97       	sbiw	r28, 0x14	; 20
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
	
	Packet_t packet;
	packet.data.header[0] = packet.data.header[1] = packet.data.header[2] = packet.data.header[3] = 0xFE;
     af8:	8e ef       	ldi	r24, 0xFE	; 254
     afa:	8c 83       	std	Y+4, r24	; 0x04
     afc:	8b 83       	std	Y+3, r24	; 0x03
     afe:	8a 83       	std	Y+2, r24	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
				// 패킷을 보낼 때 맨 앞 header 데이터 설정
	
	InitIO();
     b02:	55 d1       	rcall	.+682    	; 0xdae <InitIO>
	
	//Uart
	InitUart0();	// atmega128에서 MFC로 serial 통신을 위한 USART 레지스터 설정 함수
     b04:	9b d1       	rcall	.+822    	; 0xe3c <InitUart0>
	InitUart1();	// atmega128에서 시리얼 통신1.9b로 serial 통신을 위한 USART 레지스터 설정 함수
     b06:	a3 d1       	rcall	.+838    	; 0xe4e <InitUart1>
	
	//SPI
	InitSPI();
     b08:	b2 d1       	rcall	.+868    	; 0xe6e <InitSPI>
	
	//Timer
	InitTimer0();
     b0a:	5e d1       	rcall	.+700    	; 0xdc8 <InitTimer0>
     b0c:	62 d1       	rcall	.+708    	; 0xdd2 <InitTimer1>
	InitTimer1();
     b0e:	74 d1       	rcall	.+744    	; 0xdf8 <InitTimer3>
     b10:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	InitTimer3();
     b14:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>


	TCNT1 = TCNT3 = 0;
     b18:	1d bc       	out	0x2d, r1	; 45
     b1a:	1c bc       	out	0x2c, r1	; 44
     b1c:	60 e0       	ldi	r22, 0x00	; 0
	SetDutyCW(0.);
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	cb 01       	movw	r24, r22
     b22:	d3 da       	rcall	.-2650   	; 0xca <SetDutyCW>
     b24:	86 d1       	rcall	.+780    	; 0xe32 <InitADC>
     b26:	ff da       	rcall	.-2562   	; 0x126 <InitLS7366>
	
	//ADC
	InitADC();
     b28:	83 e8       	ldi	r24, 0x83	; 131
     b2a:	82 bf       	out	0x32, r24	; 50
	
	//LS7366
	InitLS7366();
     b2c:	78 94       	sei
     b2e:	91 2c       	mov	r9, r1
	
	//TCNT3 = 65536 - 125;
	TCNT0 = 256 - 125;
     b30:	0f 2e       	mov	r0, r31
     b32:	f4 e1       	ldi	r31, 0x14	; 20
	sei();
     b34:	7f 2e       	mov	r7, r31

	unsigned char check = 0;
     b36:	f0 2d       	mov	r31, r0
			g_SendFlag = 0;				// g_SendFlag 를 0으로 초기화한 후 데이터 송신 패킷 제작 시작
										// 참고로 g_SendFlag 변수는 제어주기 코드에서 증가됨

		
		// 패킷에 들어갈 데이터들을 각각의 위치에 저장
			packet.data.size = sizeof(Packet_data_t);		// size = 20
     b38:	0f 2e       	mov	r0, r31
     b3a:	f3 e0       	ldi	r31, 0x03	; 3
     b3c:	8f 2e       	mov	r8, r31
     b3e:	f0 2d       	mov	r31, r0
			packet.data.id = g_ID;							// g_ID = 1
			packet.data.mode = 3;							// mode = 3
     b40:	6e 01       	movw	r12, r28
     b42:	85 e1       	ldi	r24, 0x15	; 21
     b44:	c8 0e       	add	r12, r24
     b46:	d1 1c       	adc	r13, r1
     b48:	0f 2e       	mov	r0, r31
     b4a:	f6 e5       	ldi	r31, 0x56	; 86
     b4c:	af 2e       	mov	r10, r31
     b4e:	f2 e0       	ldi	r31, 0x02	; 2

				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];	
													// 버퍼에 저장되어 있는 패킷의 본 데이터들을 분리하기 위해 별도의 배열로 이동
				
				if (checkSize == 8) {				// 패킷의 실제 데이터는 7개이므로, checkSize = 8이 되는 순간 패킷 내용 분석 시작
					if(g_PacketBuffer.data.id == g_ID){		// 해당 패킷 데이터의 ID가 일치하면
     b50:	bf 2e       	mov	r11, r31
     b52:	f0 2d       	mov	r31, r0
     b54:	68 94       	set
     b56:	55 24       	eor	r5, r5
     b58:	51 f8       	bld	r5, 1
     b5a:	66 24       	eor	r6, r6

						g_PacketMode = 2;					// g_PacketMode = 2로 변경 후 다음 작업 진행
     b5c:	63 94       	inc	r6
     b5e:	ba c0       	rjmp	.+372    	; 0xcd4 <main+0x1f0>
     b60:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <g_PacketMode>
			///////									// 패킷 통신 시작을 알리는 0xFF 4개가 들어오는지 판단하는 case
				// SendShortUART1(g_buf[g_BufReadCnt]); TransUart1(32); TransUart1(13);
				if (g_buf[g_BufReadCnt] == 0xFE) {	// 버퍼에 0xFE가 들어오면
					checkSize++;					// checkSize 1 증가
					if (checkSize == 4) {			// 증가하다가 checkSize가 가 되면 
						g_PacketMode = 1;			// 패킷 모드 1로 변경
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	e1 f0       	breq	.+56     	; 0xba0 <main+0xbc>
		// 패킷 통신 해석 코드 >> 참고로 해당 코드를 작성한 13승민좌께서 AX-12모터의 패킷 통신 방식을 참고하여 만드셨다고 함
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){	
			// 반복문 선언: 버퍼로 받은 패킷 데이터 다 읽을때 까지 for문 반복 
			// SendShortUART1(g_PacketMode); TransUart1(32); TransUart1(13);
			// Packet 모드에 따라 switch문 발동
			switch(g_PacketMode){
     b68:	18 f0       	brcs	.+6      	; 0xb70 <main+0x8c>
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	e1 f1       	breq	.+120    	; 0xbe6 <main+0x102>
     b6e:	ad c0       	rjmp	.+346    	; 0xcca <main+0x1e6>
     b70:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <g_BufReadCnt>
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	ea 5c       	subi	r30, 0xCA	; 202
			
			///////					
			case 0:									// 프로그램 처음 시작할 때는 g_PacketMode = 0
			///////									// 패킷 통신 시작을 알리는 0xFF 4개가 들어오는지 판단하는 case
				// SendShortUART1(g_buf[g_BufReadCnt]); TransUart1(32); TransUart1(13);
				if (g_buf[g_BufReadCnt] == 0xFE) {	// 버퍼에 0xFE가 들어오면
     b78:	fe 4f       	sbci	r31, 0xFE	; 254
     b7a:	80 81       	ld	r24, Z
     b7c:	8e 3f       	cpi	r24, 0xFE	; 254
     b7e:	69 f4       	brne	.+26     	; 0xb9a <main+0xb6>
     b80:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <checkSize>
     b84:	8f 5f       	subi	r24, 0xFF	; 255
     b86:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <checkSize>
					checkSize++;					// checkSize 1 증가
     b8a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <checkSize>
     b8e:	84 30       	cpi	r24, 0x04	; 4
     b90:	09 f0       	breq	.+2      	; 0xb94 <main+0xb0>
					if (checkSize == 4) {			// 증가하다가 checkSize가 가 되면 
     b92:	9b c0       	rjmp	.+310    	; 0xcca <main+0x1e6>
     b94:	60 92 90 02 	sts	0x0290, r6	; 0x800290 <g_PacketMode>
     b98:	98 c0       	rjmp	.+304    	; 0xcca <main+0x1e6>
     b9a:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <checkSize>
						g_PacketMode = 1;			// 패킷 모드 1로 변경
     b9e:	95 c0       	rjmp	.+298    	; 0xcca <main+0x1e6>
     ba0:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <checkSize>
					}
				}
				else {								// 만약 checkSize가 0xFF가 아니면
					checkSize = 0;					// 패킷 통신 start 부분이 아니라고 판단하여 다시 checkSize = 0으로 초기화
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8e 0f       	add	r24, r30
			////////
			case 1:									// case 1로 넘어왔다는 의미는 패킷 통신의 실제 내용을 읽기 시작한다는 의미
			///////									// 즉, 패킷으로 받은 데이터의 본격적인 분석 시작이지만, 해당 case에서는
													// 로실 모터를 돌리기 위한 패킷 데이터인지 확인하는 작업을 진행한다. 

				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];	
     ba8:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <checkSize>
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	a0 91 83 02 	lds	r26, 0x0283	; 0x800283 <g_BufReadCnt>
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	aa 5c       	subi	r26, 0xCA	; 202
     bb6:	be 4f       	sbci	r27, 0xFE	; 254
     bb8:	8c 91       	ld	r24, X
     bba:	ea 5a       	subi	r30, 0xAA	; 170
     bbc:	fd 4f       	sbci	r31, 0xFD	; 253
     bbe:	80 83       	st	Z, r24
     bc0:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <checkSize>
     bc4:	88 30       	cpi	r24, 0x08	; 8
     bc6:	09 f0       	breq	.+2      	; 0xbca <main+0xe6>
													// 버퍼에 저장되어 있는 패킷의 본 데이터들을 분리하기 위해 별도의 배열로 이동
				
				if (checkSize == 8) {				// 패킷의 실제 데이터는 7개이므로, checkSize = 8이 되는 순간 패킷 내용 분석 시작
     bc8:	80 c0       	rjmp	.+256    	; 0xcca <main+0x1e6>
     bca:	f5 01       	movw	r30, r10
     bcc:	95 81       	ldd	r25, Z+5	; 0x05
     bce:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_ID>
					if(g_PacketBuffer.data.id == g_ID){		// 해당 패킷 데이터의 ID가 일치하면
     bd2:	98 13       	cpse	r25, r24
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <main+0xf8>
     bd6:	50 92 90 02 	sts	0x0290, r5	; 0x800290 <g_PacketMode>
     bda:	77 c0       	rjmp	.+238    	; 0xcca <main+0x1e6>
     bdc:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <g_PacketMode>

						g_PacketMode = 2;					// g_PacketMode = 2로 변경 후 다음 작업 진행
     be0:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <checkSize>
					}
					else{									// 만약 g_PacketMode = 2가 아니라면
						g_PacketMode = 0;					// 해당 모터를 돌리기 위한 패킷이 아니라고 판단하고 처음부터 다시 시작
     be4:	72 c0       	rjmp	.+228    	; 0xcca <main+0x1e6>
     be6:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <checkSize>
						checkSize = 0;						// checkSize도 다시 0으로 초기화
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	8e 0f       	add	r24, r30
			
			///////
			case 2:									// case 2까지 왔다는 것은 해당 로실 모터를 돌리기 위한 패킷이 제대로 넘어왔다는 의미
			///////									// 이제부터 패킷으로 받은 데이터의 본격적인 분석 시작
				
				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     bee:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <checkSize>
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	a0 91 83 02 	lds	r26, 0x0283	; 0x800283 <g_BufReadCnt>
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	aa 5c       	subi	r26, 0xCA	; 202
     bfc:	be 4f       	sbci	r27, 0xFE	; 254
     bfe:	8c 91       	ld	r24, X
     c00:	ea 5a       	subi	r30, 0xAA	; 170
     c02:	fd 4f       	sbci	r31, 0xFD	; 253
     c04:	80 83       	st	Z, r24
     c06:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <g_BufReadCnt>
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	ea 5c       	subi	r30, 0xCA	; 202
				check += g_buf[g_BufReadCnt];
     c0e:	fe 4f       	sbci	r31, 0xFE	; 254
     c10:	80 81       	ld	r24, Z
     c12:	98 0e       	add	r9, r24
     c14:	f5 01       	movw	r30, r10
     c16:	94 81       	ldd	r25, Z+4	; 0x04
     c18:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <checkSize>
				
				if (checkSize == g_PacketBuffer.data.size) {		// 패킷 데이터 크기가 일치 여부 확인
     c1c:	98 13       	cpse	r25, r24
     c1e:	44 c0       	rjmp	.+136    	; 0xca8 <main+0x1c4>
     c20:	87 81       	ldd	r24, Z+7	; 0x07
     c22:	98 12       	cpse	r9, r24
     c24:	3b c0       	rjmp	.+118    	; 0xc9c <main+0x1b8>
     c26:	86 81       	ldd	r24, Z+6	; 0x06

					if(check == g_PacketBuffer.data.check){			// 마지막으로 체크 데이터가 일치하는지 확인 
     c28:	82 30       	cpi	r24, 0x02	; 2
     c2a:	c1 f5       	brne	.+112    	; 0xc9c <main+0x1b8>

						switch(g_PacketBuffer.data.mode){			// 패킷 데이터로 받은 모드 비트 값 확인
     c2c:	60 85       	ldd	r22, Z+8	; 0x08
     c2e:	71 85       	ldd	r23, Z+9	; 0x09

							case 2:									// 모드 비트 값이 2일 때 
							g_Pdes = g_PacketBuffer.data.pos / 1000.;
     c30:	82 85       	ldd	r24, Z+10	; 0x0a
     c32:	93 85       	ldd	r25, Z+11	; 0x0b
     c34:	bc d2       	rcall	.+1400   	; 0x11ae <__floatsisf>
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	4a e7       	ldi	r20, 0x7A	; 122
     c3c:	54 e4       	ldi	r21, 0x44	; 68
     c3e:	1c d2       	rcall	.+1080   	; 0x1078 <__divsf3>
     c40:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <g_Pdes>
     c44:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <g_Pdes+0x1>
     c48:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_Pdes+0x2>
     c4c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_Pdes+0x3>
     c50:	f5 01       	movw	r30, r10
     c52:	64 85       	ldd	r22, Z+12	; 0x0c
							g_Vlimit = g_PacketBuffer.data.velo / 1000.;
     c54:	75 85       	ldd	r23, Z+13	; 0x0d
     c56:	86 85       	ldd	r24, Z+14	; 0x0e
     c58:	97 85       	ldd	r25, Z+15	; 0x0f
     c5a:	a9 d2       	rcall	.+1362   	; 0x11ae <__floatsisf>
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	4a e7       	ldi	r20, 0x7A	; 122
     c62:	54 e4       	ldi	r21, 0x44	; 68
     c64:	09 d2       	rcall	.+1042   	; 0x1078 <__divsf3>
     c66:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <g_Vlimit>
     c6a:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <g_Vlimit+0x1>
     c6e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <g_Vlimit+0x2>
     c72:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <g_Vlimit+0x3>
     c76:	f5 01       	movw	r30, r10
     c78:	60 89       	ldd	r22, Z+16	; 0x10
							g_Climit = g_PacketBuffer.data.cur / 1000.;		// 본 패킷의 진짜 데이터 세 개를 추출하여 각 변수에 저장
     c7a:	71 89       	ldd	r23, Z+17	; 0x11
     c7c:	82 89       	ldd	r24, Z+18	; 0x12
     c7e:	93 89       	ldd	r25, Z+19	; 0x13
     c80:	96 d2       	rcall	.+1324   	; 0x11ae <__floatsisf>
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	4a e7       	ldi	r20, 0x7A	; 122
     c88:	54 e4       	ldi	r21, 0x44	; 68
     c8a:	f6 d1       	rcall	.+1004   	; 0x1078 <__divsf3>
     c8c:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <g_Climit>
     c90:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <g_Climit+0x1>
     c94:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_Climit+0x2>
     c98:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <g_Climit+0x3>
     c9c:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <g_PacketMode>
     ca0:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <checkSize>
							break;											// 해당 변수들은 제어주기문에서 각종 계산을 통해 다시 
							}												// 패킷으로 포장되어 MFC로 송신할 것이다. 
					}
					
					check = 0;
					g_PacketMode = 0;
     ca4:	91 2c       	mov	r9, r1
					checkSize = 0;											// 패킷에서 데이터 추출을 완료했다면 패킷을 분석하기 위한
     ca6:	11 c0       	rjmp	.+34     	; 0xcca <main+0x1e6>
     ca8:	f5 01       	movw	r30, r10
							//TransUart1(13);
							break;											// 해당 변수들은 제어주기문에서 각종 계산을 통해 다시 
							}												// 패킷으로 포장되어 MFC로 송신할 것이다. 
					}
					
					check = 0;
     caa:	94 81       	ldd	r25, Z+4	; 0x04
     cac:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <checkSize>
					g_PacketMode = 0;
					checkSize = 0;											// 패킷에서 데이터 추출을 완료했다면 패킷을 분석하기 위한
				}															// 각종 파라미터들을 0으로 초기화. 이후 다음 통신을 대긴
				
				else if(checkSize > g_PacketBuffer.data.size || checkSize > sizeof(Packet_t)) {
     cb0:	98 17       	cp	r25, r24
     cb2:	20 f0       	brcs	.+8      	; 0xcbc <main+0x1d8>
     cb4:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <checkSize>
     cb8:	85 31       	cpi	r24, 0x15	; 21
     cba:	38 f0       	brcs	.+14     	; 0xcca <main+0x1e6>
     cbc:	86 e6       	ldi	r24, 0x66	; 102
     cbe:	dc d0       	rcall	.+440    	; 0xe78 <TransUart0>
     cc0:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <g_PacketMode>
																			// 그런데 데이터 크기가 일치하지 않으면
					TransUart0('f');										// 문자 f 출력 후 파라미터들을 0으로 초기화 후
     cc4:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <checkSize>
					check = 0;												// 다음 통신을 대기
					g_PacketMode = 0;
     cc8:	91 2c       	mov	r9, r1
     cca:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <g_BufReadCnt>
					checkSize = 0;
     cce:	8f 5f       	subi	r24, 0xFF	; 255
				}															// 각종 파라미터들을 0으로 초기화. 이후 다음 통신을 대긴
				
				else if(checkSize > g_PacketBuffer.data.size || checkSize > sizeof(Packet_t)) {
																			// 그런데 데이터 크기가 일치하지 않으면
					TransUart0('f');										// 문자 f 출력 후 파라미터들을 0으로 초기화 후
					check = 0;												// 다음 통신을 대기
     cd0:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <g_BufReadCnt>
	unsigned char check = 0;
	
    while (1) {
		
		// 패킷 통신 해석 코드 >> 참고로 해당 코드를 작성한 13승민좌께서 AX-12모터의 패킷 통신 방식을 참고하여 만드셨다고 함
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){	
     cd4:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <g_BufReadCnt>
     cd8:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <g_BufWriteCnt>
     cdc:	98 13       	cpse	r25, r24
     cde:	40 cf       	rjmp	.-384    	; 0xb60 <main+0x7c>
     ce0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <g_SendFlag>
     ce4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <g_SendFlag+0x1>
		
		/////////////////////////////////////////////////////////////
		// 여기부터는 반대로 ATMega128에서 MFC로 데이터를 보내는 코드 //
		////////////////////////////////////////////////////////////
		
		if(g_SendFlag > 19){			// 데이터 송신 플래그 g_SendFlag 가 20 이상이면
     ce8:	44 97       	sbiw	r24, 0x14	; 20
     cea:	a4 f3       	brlt	.-24     	; 0xcd4 <main+0x1f0>
     cec:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <g_SendFlag+0x1>
     cf0:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <g_SendFlag>
			g_SendFlag = 0;				// g_SendFlag 를 0으로 초기화한 후 데이터 송신 패킷 제작 시작
     cf4:	7d 82       	std	Y+5, r7	; 0x05
     cf6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_ID>
     cfa:	8e 83       	std	Y+6, r24	; 0x06
										// 참고로 g_SendFlag 변수는 제어주기 코드에서 증가됨

		
		// 패킷에 들어갈 데이터들을 각각의 위치에 저장
			packet.data.size = sizeof(Packet_data_t);		// size = 20
     cfc:	8f 82       	std	Y+7, r8	; 0x07
			packet.data.id = g_ID;							// g_ID = 1
     cfe:	18 86       	std	Y+8, r1	; 0x08
			packet.data.mode = 3;							// mode = 3
     d00:	60 91 84 02 	lds	r22, 0x0284	; 0x800284 <g_Pcur>
			packet.data.pos = g_Pdes * 1000;		
			packet.data.velo = g_Vlimit * 1000;		
			packet.data.cur = g_Climit * 1000;				// 소수점 아래 값 손실 방지를 위해 1000을 곱한 후 송신
			*/
			
			packet.data.pos = g_Pcur * 1000;
     d04:	70 91 85 02 	lds	r23, 0x0285	; 0x800285 <g_Pcur+0x1>
     d08:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <g_Pcur+0x2>
     d0c:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <g_Pcur+0x3>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	4a e7       	ldi	r20, 0x7A	; 122
     d16:	54 e4       	ldi	r21, 0x44	; 68
     d18:	fe d2       	rcall	.+1532   	; 0x1316 <__mulsf3>
     d1a:	16 d2       	rcall	.+1068   	; 0x1148 <__fixsfsi>
     d1c:	69 87       	std	Y+9, r22	; 0x09
     d1e:	7a 87       	std	Y+10, r23	; 0x0a
     d20:	8b 87       	std	Y+11, r24	; 0x0b
     d22:	9c 87       	std	Y+12, r25	; 0x0c
     d24:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <g_Vcur>
			packet.data.velo = g_Vcur * 1000;
     d28:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <g_Vcur+0x1>
     d2c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_Vcur+0x2>
     d30:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <g_Vcur+0x3>
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	4a e7       	ldi	r20, 0x7A	; 122
     d3a:	54 e4       	ldi	r21, 0x44	; 68
     d3c:	ec d2       	rcall	.+1496   	; 0x1316 <__mulsf3>
     d3e:	04 d2       	rcall	.+1032   	; 0x1148 <__fixsfsi>
     d40:	6d 87       	std	Y+13, r22	; 0x0d
     d42:	7e 87       	std	Y+14, r23	; 0x0e
     d44:	8f 87       	std	Y+15, r24	; 0x0f
     d46:	98 8b       	std	Y+16, r25	; 0x10
     d48:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <g_Ccur>
			packet.data.cur = g_Ccur * 1000;
     d4c:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <g_Ccur+0x1>
     d50:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <g_Ccur+0x2>
     d54:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <g_Ccur+0x3>
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	4a e7       	ldi	r20, 0x7A	; 122
     d5e:	54 e4       	ldi	r21, 0x44	; 68
     d60:	da d2       	rcall	.+1460   	; 0x1316 <__mulsf3>
     d62:	f2 d1       	rcall	.+996    	; 0x1148 <__fixsfsi>
     d64:	69 8b       	std	Y+17, r22	; 0x11
     d66:	7a 8b       	std	Y+18, r23	; 0x12
     d68:	8b 8b       	std	Y+19, r24	; 0x13
     d6a:	9c 8b       	std	Y+20, r25	; 0x14
     d6c:	fe 01       	movw	r30, r28
     d6e:	39 96       	adiw	r30, 0x09	; 9
     d70:	81 91       	ld	r24, Z+
     d72:	98 85       	ldd	r25, Y+8	; 0x08
     d74:	89 0f       	add	r24, r25
			
			
			for (int i = 8; i < sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];			// checksum 제작: pos~cur데이터를 다 더하고 저장
     d76:	88 87       	std	Y+8, r24	; 0x08
     d78:	ce 16       	cp	r12, r30
     d7a:	df 06       	cpc	r13, r31
			packet.data.pos = g_Pcur * 1000;
			packet.data.velo = g_Vcur * 1000;
			packet.data.cur = g_Ccur * 1000;
			
			
			for (int i = 8; i < sizeof(Packet_t); i++)
     d7c:	c9 f7       	brne	.-14     	; 0xd70 <main+0x28c>
     d7e:	8e 01       	movw	r16, r28
     d80:	0f 5f       	subi	r16, 0xFF	; 255
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
     d84:	78 01       	movw	r14, r16
     d86:	f7 01       	movw	r30, r14
			packet.data.check += packet.buffer[i];			// checksum 제작: pos~cur데이터를 다 더하고 저장
			
			for(int i=0; i<packet.data.size; i++)
				TransUart0(packet.buffer[i]);				// 최종 패킷 발송
     d88:	81 91       	ld	r24, Z+
     d8a:	7f 01       	movw	r14, r30
     d8c:	75 d0       	rcall	.+234    	; 0xe78 <TransUart0>
     d8e:	ce 14       	cp	r12, r14
     d90:	df 04       	cpc	r13, r15
			
			
			for (int i = 8; i < sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];			// checksum 제작: pos~cur데이터를 다 더하고 저장
			
			for(int i=0; i<packet.data.size; i++)
     d92:	c9 f7       	brne	.-14     	; 0xd86 <main+0x2a2>
     d94:	f8 01       	movw	r30, r16
     d96:	81 91       	ld	r24, Z+
				TransUart0(packet.buffer[i]);				// 최종 패킷 발송
				
			for(int i=0; i<packet.data.size; i++){			// 얘는 MFC로 받은 값이 ATMega로 잘 받아졌는지 확인하는 용도
				TransNumUart1(packet.buffer[i]);			// 시리얼 통신 1.9b로 쏴 주는 코드
     d98:	8f 01       	movw	r16, r30
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	79 d0       	rcall	.+242    	; 0xe90 <TransNumUart1>
     d9e:	80 e2       	ldi	r24, 0x20	; 32
     da0:	6f d0       	rcall	.+222    	; 0xe80 <TransUart1>
     da2:	0c 15       	cp	r16, r12
				TransUart1(32);	// 스페이스바
     da4:	1d 05       	cpc	r17, r13
     da6:	b1 f7       	brne	.-20     	; 0xd94 <main+0x2b0>
     da8:	8d e0       	ldi	r24, 0x0D	; 13
			packet.data.check += packet.buffer[i];			// checksum 제작: pos~cur데이터를 다 더하고 저장
			
			for(int i=0; i<packet.data.size; i++)
				TransUart0(packet.buffer[i]);				// 최종 패킷 발송
				
			for(int i=0; i<packet.data.size; i++){			// 얘는 MFC로 받은 값이 ATMega로 잘 받아졌는지 확인하는 용도
     daa:	6a d0       	rcall	.+212    	; 0xe80 <TransUart1>
     dac:	93 cf       	rjmp	.-218    	; 0xcd4 <main+0x1f0>

00000dae <InitIO>:
     dae:	8f ef       	ldi	r24, 0xFF	; 255
				TransNumUart1(packet.buffer[i]);			// 시리얼 통신 1.9b로 쏴 주는 코드
				TransUart1(32);	// 스페이스바
			}
			TransUart1(13);		// 줄 바꿈
     db0:	8a bb       	out	0x1a, r24	; 26
     db2:	84 bb       	out	0x14, r24	; 20
     db4:	88 e0       	ldi	r24, 0x08	; 8
     db6:	81 bb       	out	0x11, r24	; 17
	TransUart1( ((num%100000) / 10000) + 48);
	TransUart1( ((num%10000) / 1000) + 48);
	TransUart1( ((num%1000) / 100) + 48);
	TransUart1( ((num%100) / 10) + 48);
	TransUart1( num%10 + 48 );
}
     db8:	87 e6       	ldi	r24, 0x67	; 103
     dba:	87 bb       	out	0x17, r24	; 23
     dbc:	8a e1       	ldi	r24, 0x1A	; 26
     dbe:	82 b9       	out	0x02, r24	; 2
     dc0:	1b ba       	out	0x1b, r1	; 27
     dc2:	87 e0       	ldi	r24, 0x07	; 7
     dc4:	88 bb       	out	0x18, r24	; 24
     dc6:	08 95       	ret

00000dc8 <InitTimer0>:
     dc8:	84 e0       	ldi	r24, 0x04	; 4
     dca:	83 bf       	out	0x33, r24	; 51
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	87 bf       	out	0x37, r24	; 55
     dd0:	08 95       	ret

00000dd2 <InitTimer1>:
     dd2:	82 ee       	ldi	r24, 0xE2	; 226
     dd4:	8f bd       	out	0x2f, r24	; 47
     dd6:	81 e1       	ldi	r24, 0x11	; 17
     dd8:	8e bd       	out	0x2e, r24	; 46
     dda:	8f e8       	ldi	r24, 0x8F	; 143
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	97 bd       	out	0x27, r25	; 39
     de0:	86 bd       	out	0x26, r24	; 38
     de2:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     de6:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     dea:	1b bc       	out	0x2b, r1	; 43
     dec:	1a bc       	out	0x2a, r1	; 42
     dee:	19 bc       	out	0x29, r1	; 41
     df0:	18 bc       	out	0x28, r1	; 40
     df2:	1d bc       	out	0x2d, r1	; 45
     df4:	1c bc       	out	0x2c, r1	; 44
     df6:	08 95       	ret

00000df8 <InitTimer3>:
     df8:	82 eb       	ldi	r24, 0xB2	; 178
     dfa:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     dfe:	81 e1       	ldi	r24, 0x11	; 17
     e00:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     e04:	8f e8       	ldi	r24, 0x8F	; 143
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     e0c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e10:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     e14:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     e18:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e1c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     e20:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e24:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     e28:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e2c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e30:	08 95       	ret

00000e32 <InitADC>:
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	87 b9       	out	0x07, r24	; 7
     e36:	86 e8       	ldi	r24, 0x86	; 134
     e38:	86 b9       	out	0x06, r24	; 6
     e3a:	08 95       	ret

00000e3c <InitUart0>:
     e3c:	1b b8       	out	0x0b, r1	; 11
     e3e:	88 e9       	ldi	r24, 0x98	; 152
     e40:	8a b9       	out	0x0a, r24	; 10
     e42:	86 e0       	ldi	r24, 0x06	; 6
     e44:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     e48:	87 e6       	ldi	r24, 0x67	; 103
     e4a:	89 b9       	out	0x09, r24	; 9
     e4c:	08 95       	ret

00000e4e <InitUart1>:
     e4e:	81 b3       	in	r24, 0x11	; 17
     e50:	83 7f       	andi	r24, 0xF3	; 243
     e52:	88 60       	ori	r24, 0x08	; 8
     e54:	81 bb       	out	0x11, r24	; 17
     e56:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     e5a:	88 e1       	ldi	r24, 0x18	; 24
     e5c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     e60:	86 e0       	ldi	r24, 0x06	; 6
     e62:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     e66:	88 e0       	ldi	r24, 0x08	; 8
     e68:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     e6c:	08 95       	ret

00000e6e <InitSPI>:
     e6e:	80 e5       	ldi	r24, 0x50	; 80
     e70:	8d b9       	out	0x0d, r24	; 13
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	8e b9       	out	0x0e, r24	; 14
     e76:	08 95       	ret

00000e78 <TransUart0>:
     e78:	5d 9b       	sbis	0x0b, 5	; 11
     e7a:	fe cf       	rjmp	.-4      	; 0xe78 <TransUart0>
     e7c:	8c b9       	out	0x0c, r24	; 12
     e7e:	08 95       	ret

00000e80 <TransUart1>:
     e80:	eb e9       	ldi	r30, 0x9B	; 155
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	90 81       	ld	r25, Z
     e86:	95 ff       	sbrs	r25, 5
     e88:	fd cf       	rjmp	.-6      	; 0xe84 <TransUart1+0x4>
     e8a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     e8e:	08 95       	ret

00000e90 <TransNumUart1>:
     e90:	8f 92       	push	r8
     e92:	9f 92       	push	r9
     e94:	af 92       	push	r10
     e96:	bf 92       	push	r11
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	ec 01       	movw	r28, r24
     eaa:	99 23       	and	r25, r25
     eac:	2c f4       	brge	.+10     	; 0xeb8 <TransNumUart1+0x28>
     eae:	8d e2       	ldi	r24, 0x2D	; 45
     eb0:	e7 df       	rcall	.-50     	; 0xe80 <TransUart1>
     eb2:	d1 95       	neg	r29
     eb4:	c1 95       	neg	r28
     eb6:	d1 09       	sbc	r29, r1
     eb8:	6e 01       	movw	r12, r28
     eba:	0d 2e       	mov	r0, r29
     ebc:	00 0c       	add	r0, r0
     ebe:	ee 08       	sbc	r14, r14
     ec0:	ff 08       	sbc	r15, r15
     ec2:	c7 01       	movw	r24, r14
     ec4:	b6 01       	movw	r22, r12
     ec6:	20 e8       	ldi	r18, 0x80	; 128
     ec8:	36 e9       	ldi	r19, 0x96	; 150
     eca:	48 e9       	ldi	r20, 0x98	; 152
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	99 d2       	rcall	.+1330   	; 0x1402 <__divmodsi4>
     ed0:	0f 2e       	mov	r0, r31
     ed2:	f0 e4       	ldi	r31, 0x40	; 64
     ed4:	8f 2e       	mov	r8, r31
     ed6:	f2 e4       	ldi	r31, 0x42	; 66
     ed8:	9f 2e       	mov	r9, r31
     eda:	ff e0       	ldi	r31, 0x0F	; 15
     edc:	af 2e       	mov	r10, r31
     ede:	b1 2c       	mov	r11, r1
     ee0:	f0 2d       	mov	r31, r0
     ee2:	a5 01       	movw	r20, r10
     ee4:	94 01       	movw	r18, r8
     ee6:	8d d2       	rcall	.+1306   	; 0x1402 <__divmodsi4>
     ee8:	80 e3       	ldi	r24, 0x30	; 48
     eea:	82 0f       	add	r24, r18
     eec:	c9 df       	rcall	.-110    	; 0xe80 <TransUart1>
     eee:	c7 01       	movw	r24, r14
     ef0:	b6 01       	movw	r22, r12
     ef2:	a5 01       	movw	r20, r10
     ef4:	94 01       	movw	r18, r8
     ef6:	85 d2       	rcall	.+1290   	; 0x1402 <__divmodsi4>
     ef8:	0f 2e       	mov	r0, r31
     efa:	f0 ea       	ldi	r31, 0xA0	; 160
     efc:	8f 2e       	mov	r8, r31
     efe:	f6 e8       	ldi	r31, 0x86	; 134
     f00:	9f 2e       	mov	r9, r31
     f02:	aa 24       	eor	r10, r10
     f04:	a3 94       	inc	r10
     f06:	b1 2c       	mov	r11, r1
     f08:	f0 2d       	mov	r31, r0
     f0a:	a5 01       	movw	r20, r10
     f0c:	94 01       	movw	r18, r8
     f0e:	79 d2       	rcall	.+1266   	; 0x1402 <__divmodsi4>
     f10:	80 e3       	ldi	r24, 0x30	; 48
     f12:	82 0f       	add	r24, r18
     f14:	b5 df       	rcall	.-150    	; 0xe80 <TransUart1>
     f16:	c7 01       	movw	r24, r14
     f18:	b6 01       	movw	r22, r12
     f1a:	a5 01       	movw	r20, r10
     f1c:	94 01       	movw	r18, r8
     f1e:	71 d2       	rcall	.+1250   	; 0x1402 <__divmodsi4>
     f20:	20 e1       	ldi	r18, 0x10	; 16
     f22:	37 e2       	ldi	r19, 0x27	; 39
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	6c d2       	rcall	.+1240   	; 0x1402 <__divmodsi4>
     f2a:	80 e3       	ldi	r24, 0x30	; 48
     f2c:	82 0f       	add	r24, r18
     f2e:	a8 df       	rcall	.-176    	; 0xe80 <TransUart1>
     f30:	ce 01       	movw	r24, r28
     f32:	60 e1       	ldi	r22, 0x10	; 16
     f34:	77 e2       	ldi	r23, 0x27	; 39
     f36:	52 d2       	rcall	.+1188   	; 0x13dc <__divmodhi4>
     f38:	08 ee       	ldi	r16, 0xE8	; 232
     f3a:	13 e0       	ldi	r17, 0x03	; 3
     f3c:	b8 01       	movw	r22, r16
     f3e:	4e d2       	rcall	.+1180   	; 0x13dc <__divmodhi4>
     f40:	80 e3       	ldi	r24, 0x30	; 48
     f42:	86 0f       	add	r24, r22
     f44:	9d df       	rcall	.-198    	; 0xe80 <TransUart1>
     f46:	ce 01       	movw	r24, r28
     f48:	b8 01       	movw	r22, r16
     f4a:	48 d2       	rcall	.+1168   	; 0x13dc <__divmodhi4>
     f4c:	04 e6       	ldi	r16, 0x64	; 100
     f4e:	10 e0       	ldi	r17, 0x00	; 0
     f50:	b8 01       	movw	r22, r16
     f52:	44 d2       	rcall	.+1160   	; 0x13dc <__divmodhi4>
     f54:	80 e3       	ldi	r24, 0x30	; 48
     f56:	86 0f       	add	r24, r22
     f58:	93 df       	rcall	.-218    	; 0xe80 <TransUart1>
     f5a:	ce 01       	movw	r24, r28
     f5c:	b8 01       	movw	r22, r16
     f5e:	3e d2       	rcall	.+1148   	; 0x13dc <__divmodhi4>
     f60:	0a e0       	ldi	r16, 0x0A	; 10
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	b8 01       	movw	r22, r16
     f66:	3a d2       	rcall	.+1140   	; 0x13dc <__divmodhi4>
     f68:	80 e3       	ldi	r24, 0x30	; 48
     f6a:	86 0f       	add	r24, r22
     f6c:	89 df       	rcall	.-238    	; 0xe80 <TransUart1>
     f6e:	ce 01       	movw	r24, r28
     f70:	b8 01       	movw	r22, r16
     f72:	34 d2       	rcall	.+1128   	; 0x13dc <__divmodhi4>
     f74:	80 5d       	subi	r24, 0xD0	; 208
     f76:	84 df       	rcall	.-248    	; 0xe80 <TransUart1>
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	df 90       	pop	r13
     f86:	cf 90       	pop	r12
     f88:	bf 90       	pop	r11
     f8a:	af 90       	pop	r10
     f8c:	9f 90       	pop	r9
     f8e:	8f 90       	pop	r8
     f90:	08 95       	ret

00000f92 <SPI_MasterSend>:
// Input : data
// Output : None
//////////////////////////////////////////////////////////////////
void SPI_MasterSend(unsigned char data){
	
	SPDR = data;
     f92:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80));
     f94:	77 9b       	sbis	0x0e, 7	; 14
     f96:	fe cf       	rjmp	.-4      	; 0xf94 <SPI_MasterSend+0x2>
	data = SPDR;
     f98:	8f b1       	in	r24, 0x0f	; 15
     f9a:	08 95       	ret

00000f9c <SPI_MasterRecv>:
// Input : None
// Output : data
//////////////////////////////////////////////////////////////////
unsigned char SPI_MasterRecv(void)
{
	SPDR = 0x00;
     f9c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80));
     f9e:	77 9b       	sbis	0x0e, 7	; 14
     fa0:	fe cf       	rjmp	.-4      	; 0xf9e <SPI_MasterRecv+0x2>
	return SPDR;
     fa2:	8f b1       	in	r24, 0x0f	; 15
     fa4:	08 95       	ret

00000fa6 <__subsf3>:
     fa6:	50 58       	subi	r21, 0x80	; 128

00000fa8 <__addsf3>:
     fa8:	bb 27       	eor	r27, r27
     faa:	aa 27       	eor	r26, r26
     fac:	0e d0       	rcall	.+28     	; 0xfca <__addsf3x>
     fae:	75 c1       	rjmp	.+746    	; 0x129a <__fp_round>
     fb0:	66 d1       	rcall	.+716    	; 0x127e <__fp_pscA>
     fb2:	30 f0       	brcs	.+12     	; 0xfc0 <__addsf3+0x18>
     fb4:	6b d1       	rcall	.+726    	; 0x128c <__fp_pscB>
     fb6:	20 f0       	brcs	.+8      	; 0xfc0 <__addsf3+0x18>
     fb8:	31 f4       	brne	.+12     	; 0xfc6 <__addsf3+0x1e>
     fba:	9f 3f       	cpi	r25, 0xFF	; 255
     fbc:	11 f4       	brne	.+4      	; 0xfc2 <__addsf3+0x1a>
     fbe:	1e f4       	brtc	.+6      	; 0xfc6 <__addsf3+0x1e>
     fc0:	5b c1       	rjmp	.+694    	; 0x1278 <__fp_nan>
     fc2:	0e f4       	brtc	.+2      	; 0xfc6 <__addsf3+0x1e>
     fc4:	e0 95       	com	r30
     fc6:	e7 fb       	bst	r30, 7
     fc8:	51 c1       	rjmp	.+674    	; 0x126c <__fp_inf>

00000fca <__addsf3x>:
     fca:	e9 2f       	mov	r30, r25
     fcc:	77 d1       	rcall	.+750    	; 0x12bc <__fp_split3>
     fce:	80 f3       	brcs	.-32     	; 0xfb0 <__addsf3+0x8>
     fd0:	ba 17       	cp	r27, r26
     fd2:	62 07       	cpc	r22, r18
     fd4:	73 07       	cpc	r23, r19
     fd6:	84 07       	cpc	r24, r20
     fd8:	95 07       	cpc	r25, r21
     fda:	18 f0       	brcs	.+6      	; 0xfe2 <__addsf3x+0x18>
     fdc:	71 f4       	brne	.+28     	; 0xffa <__addsf3x+0x30>
     fde:	9e f5       	brtc	.+102    	; 0x1046 <__addsf3x+0x7c>
     fe0:	8f c1       	rjmp	.+798    	; 0x1300 <__fp_zero>
     fe2:	0e f4       	brtc	.+2      	; 0xfe6 <__addsf3x+0x1c>
     fe4:	e0 95       	com	r30
     fe6:	0b 2e       	mov	r0, r27
     fe8:	ba 2f       	mov	r27, r26
     fea:	a0 2d       	mov	r26, r0
     fec:	0b 01       	movw	r0, r22
     fee:	b9 01       	movw	r22, r18
     ff0:	90 01       	movw	r18, r0
     ff2:	0c 01       	movw	r0, r24
     ff4:	ca 01       	movw	r24, r20
     ff6:	a0 01       	movw	r20, r0
     ff8:	11 24       	eor	r1, r1
     ffa:	ff 27       	eor	r31, r31
     ffc:	59 1b       	sub	r21, r25
     ffe:	99 f0       	breq	.+38     	; 0x1026 <__addsf3x+0x5c>
    1000:	59 3f       	cpi	r21, 0xF9	; 249
    1002:	50 f4       	brcc	.+20     	; 0x1018 <__addsf3x+0x4e>
    1004:	50 3e       	cpi	r21, 0xE0	; 224
    1006:	68 f1       	brcs	.+90     	; 0x1062 <__addsf3x+0x98>
    1008:	1a 16       	cp	r1, r26
    100a:	f0 40       	sbci	r31, 0x00	; 0
    100c:	a2 2f       	mov	r26, r18
    100e:	23 2f       	mov	r18, r19
    1010:	34 2f       	mov	r19, r20
    1012:	44 27       	eor	r20, r20
    1014:	58 5f       	subi	r21, 0xF8	; 248
    1016:	f3 cf       	rjmp	.-26     	; 0xffe <__addsf3x+0x34>
    1018:	46 95       	lsr	r20
    101a:	37 95       	ror	r19
    101c:	27 95       	ror	r18
    101e:	a7 95       	ror	r26
    1020:	f0 40       	sbci	r31, 0x00	; 0
    1022:	53 95       	inc	r21
    1024:	c9 f7       	brne	.-14     	; 0x1018 <__addsf3x+0x4e>
    1026:	7e f4       	brtc	.+30     	; 0x1046 <__addsf3x+0x7c>
    1028:	1f 16       	cp	r1, r31
    102a:	ba 0b       	sbc	r27, r26
    102c:	62 0b       	sbc	r22, r18
    102e:	73 0b       	sbc	r23, r19
    1030:	84 0b       	sbc	r24, r20
    1032:	ba f0       	brmi	.+46     	; 0x1062 <__addsf3x+0x98>
    1034:	91 50       	subi	r25, 0x01	; 1
    1036:	a1 f0       	breq	.+40     	; 0x1060 <__addsf3x+0x96>
    1038:	ff 0f       	add	r31, r31
    103a:	bb 1f       	adc	r27, r27
    103c:	66 1f       	adc	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	88 1f       	adc	r24, r24
    1042:	c2 f7       	brpl	.-16     	; 0x1034 <__addsf3x+0x6a>
    1044:	0e c0       	rjmp	.+28     	; 0x1062 <__addsf3x+0x98>
    1046:	ba 0f       	add	r27, r26
    1048:	62 1f       	adc	r22, r18
    104a:	73 1f       	adc	r23, r19
    104c:	84 1f       	adc	r24, r20
    104e:	48 f4       	brcc	.+18     	; 0x1062 <__addsf3x+0x98>
    1050:	87 95       	ror	r24
    1052:	77 95       	ror	r23
    1054:	67 95       	ror	r22
    1056:	b7 95       	ror	r27
    1058:	f7 95       	ror	r31
    105a:	9e 3f       	cpi	r25, 0xFE	; 254
    105c:	08 f0       	brcs	.+2      	; 0x1060 <__addsf3x+0x96>
    105e:	b3 cf       	rjmp	.-154    	; 0xfc6 <__addsf3+0x1e>
    1060:	93 95       	inc	r25
    1062:	88 0f       	add	r24, r24
    1064:	08 f0       	brcs	.+2      	; 0x1068 <__addsf3x+0x9e>
    1066:	99 27       	eor	r25, r25
    1068:	ee 0f       	add	r30, r30
    106a:	97 95       	ror	r25
    106c:	87 95       	ror	r24
    106e:	08 95       	ret

00001070 <__cmpsf2>:
    1070:	d9 d0       	rcall	.+434    	; 0x1224 <__fp_cmp>
    1072:	08 f4       	brcc	.+2      	; 0x1076 <__cmpsf2+0x6>
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	08 95       	ret

00001078 <__divsf3>:
    1078:	0c d0       	rcall	.+24     	; 0x1092 <__divsf3x>
    107a:	0f c1       	rjmp	.+542    	; 0x129a <__fp_round>
    107c:	07 d1       	rcall	.+526    	; 0x128c <__fp_pscB>
    107e:	40 f0       	brcs	.+16     	; 0x1090 <__divsf3+0x18>
    1080:	fe d0       	rcall	.+508    	; 0x127e <__fp_pscA>
    1082:	30 f0       	brcs	.+12     	; 0x1090 <__divsf3+0x18>
    1084:	21 f4       	brne	.+8      	; 0x108e <__divsf3+0x16>
    1086:	5f 3f       	cpi	r21, 0xFF	; 255
    1088:	19 f0       	breq	.+6      	; 0x1090 <__divsf3+0x18>
    108a:	f0 c0       	rjmp	.+480    	; 0x126c <__fp_inf>
    108c:	51 11       	cpse	r21, r1
    108e:	39 c1       	rjmp	.+626    	; 0x1302 <__fp_szero>
    1090:	f3 c0       	rjmp	.+486    	; 0x1278 <__fp_nan>

00001092 <__divsf3x>:
    1092:	14 d1       	rcall	.+552    	; 0x12bc <__fp_split3>
    1094:	98 f3       	brcs	.-26     	; 0x107c <__divsf3+0x4>

00001096 <__divsf3_pse>:
    1096:	99 23       	and	r25, r25
    1098:	c9 f3       	breq	.-14     	; 0x108c <__divsf3+0x14>
    109a:	55 23       	and	r21, r21
    109c:	b1 f3       	breq	.-20     	; 0x108a <__divsf3+0x12>
    109e:	95 1b       	sub	r25, r21
    10a0:	55 0b       	sbc	r21, r21
    10a2:	bb 27       	eor	r27, r27
    10a4:	aa 27       	eor	r26, r26
    10a6:	62 17       	cp	r22, r18
    10a8:	73 07       	cpc	r23, r19
    10aa:	84 07       	cpc	r24, r20
    10ac:	38 f0       	brcs	.+14     	; 0x10bc <__divsf3_pse+0x26>
    10ae:	9f 5f       	subi	r25, 0xFF	; 255
    10b0:	5f 4f       	sbci	r21, 0xFF	; 255
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	44 1f       	adc	r20, r20
    10b8:	aa 1f       	adc	r26, r26
    10ba:	a9 f3       	breq	.-22     	; 0x10a6 <__divsf3_pse+0x10>
    10bc:	33 d0       	rcall	.+102    	; 0x1124 <__stack+0x25>
    10be:	0e 2e       	mov	r0, r30
    10c0:	3a f0       	brmi	.+14     	; 0x10d0 <__divsf3_pse+0x3a>
    10c2:	e0 e8       	ldi	r30, 0x80	; 128
    10c4:	30 d0       	rcall	.+96     	; 0x1126 <__stack+0x27>
    10c6:	91 50       	subi	r25, 0x01	; 1
    10c8:	50 40       	sbci	r21, 0x00	; 0
    10ca:	e6 95       	lsr	r30
    10cc:	00 1c       	adc	r0, r0
    10ce:	ca f7       	brpl	.-14     	; 0x10c2 <__divsf3_pse+0x2c>
    10d0:	29 d0       	rcall	.+82     	; 0x1124 <__stack+0x25>
    10d2:	fe 2f       	mov	r31, r30
    10d4:	27 d0       	rcall	.+78     	; 0x1124 <__stack+0x25>
    10d6:	66 0f       	add	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	88 1f       	adc	r24, r24
    10dc:	bb 1f       	adc	r27, r27
    10de:	26 17       	cp	r18, r22
    10e0:	37 07       	cpc	r19, r23
    10e2:	48 07       	cpc	r20, r24
    10e4:	ab 07       	cpc	r26, r27
    10e6:	b0 e8       	ldi	r27, 0x80	; 128
    10e8:	09 f0       	breq	.+2      	; 0x10ec <__divsf3_pse+0x56>
    10ea:	bb 0b       	sbc	r27, r27
    10ec:	80 2d       	mov	r24, r0
    10ee:	bf 01       	movw	r22, r30
    10f0:	ff 27       	eor	r31, r31
    10f2:	93 58       	subi	r25, 0x83	; 131
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	2a f0       	brmi	.+10     	; 0x1102 <__stack+0x3>
    10f8:	9e 3f       	cpi	r25, 0xFE	; 254
    10fa:	51 05       	cpc	r21, r1
    10fc:	68 f0       	brcs	.+26     	; 0x1118 <__stack+0x19>
    10fe:	b6 c0       	rjmp	.+364    	; 0x126c <__fp_inf>
    1100:	00 c1       	rjmp	.+512    	; 0x1302 <__fp_szero>
    1102:	5f 3f       	cpi	r21, 0xFF	; 255
    1104:	ec f3       	brlt	.-6      	; 0x1100 <__stack+0x1>
    1106:	98 3e       	cpi	r25, 0xE8	; 232
    1108:	dc f3       	brlt	.-10     	; 0x1100 <__stack+0x1>
    110a:	86 95       	lsr	r24
    110c:	77 95       	ror	r23
    110e:	67 95       	ror	r22
    1110:	b7 95       	ror	r27
    1112:	f7 95       	ror	r31
    1114:	9f 5f       	subi	r25, 0xFF	; 255
    1116:	c9 f7       	brne	.-14     	; 0x110a <__stack+0xb>
    1118:	88 0f       	add	r24, r24
    111a:	91 1d       	adc	r25, r1
    111c:	96 95       	lsr	r25
    111e:	87 95       	ror	r24
    1120:	97 f9       	bld	r25, 7
    1122:	08 95       	ret
    1124:	e1 e0       	ldi	r30, 0x01	; 1
    1126:	66 0f       	add	r22, r22
    1128:	77 1f       	adc	r23, r23
    112a:	88 1f       	adc	r24, r24
    112c:	bb 1f       	adc	r27, r27
    112e:	62 17       	cp	r22, r18
    1130:	73 07       	cpc	r23, r19
    1132:	84 07       	cpc	r24, r20
    1134:	ba 07       	cpc	r27, r26
    1136:	20 f0       	brcs	.+8      	; 0x1140 <__stack+0x41>
    1138:	62 1b       	sub	r22, r18
    113a:	73 0b       	sbc	r23, r19
    113c:	84 0b       	sbc	r24, r20
    113e:	ba 0b       	sbc	r27, r26
    1140:	ee 1f       	adc	r30, r30
    1142:	88 f7       	brcc	.-30     	; 0x1126 <__stack+0x27>
    1144:	e0 95       	com	r30
    1146:	08 95       	ret

00001148 <__fixsfsi>:
    1148:	04 d0       	rcall	.+8      	; 0x1152 <__fixunssfsi>
    114a:	68 94       	set
    114c:	b1 11       	cpse	r27, r1
    114e:	d9 c0       	rjmp	.+434    	; 0x1302 <__fp_szero>
    1150:	08 95       	ret

00001152 <__fixunssfsi>:
    1152:	bc d0       	rcall	.+376    	; 0x12cc <__fp_splitA>
    1154:	88 f0       	brcs	.+34     	; 0x1178 <__fixunssfsi+0x26>
    1156:	9f 57       	subi	r25, 0x7F	; 127
    1158:	90 f0       	brcs	.+36     	; 0x117e <__fixunssfsi+0x2c>
    115a:	b9 2f       	mov	r27, r25
    115c:	99 27       	eor	r25, r25
    115e:	b7 51       	subi	r27, 0x17	; 23
    1160:	a0 f0       	brcs	.+40     	; 0x118a <__fixunssfsi+0x38>
    1162:	d1 f0       	breq	.+52     	; 0x1198 <__fixunssfsi+0x46>
    1164:	66 0f       	add	r22, r22
    1166:	77 1f       	adc	r23, r23
    1168:	88 1f       	adc	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	1a f0       	brmi	.+6      	; 0x1174 <__fixunssfsi+0x22>
    116e:	ba 95       	dec	r27
    1170:	c9 f7       	brne	.-14     	; 0x1164 <__fixunssfsi+0x12>
    1172:	12 c0       	rjmp	.+36     	; 0x1198 <__fixunssfsi+0x46>
    1174:	b1 30       	cpi	r27, 0x01	; 1
    1176:	81 f0       	breq	.+32     	; 0x1198 <__fixunssfsi+0x46>
    1178:	c3 d0       	rcall	.+390    	; 0x1300 <__fp_zero>
    117a:	b1 e0       	ldi	r27, 0x01	; 1
    117c:	08 95       	ret
    117e:	c0 c0       	rjmp	.+384    	; 0x1300 <__fp_zero>
    1180:	67 2f       	mov	r22, r23
    1182:	78 2f       	mov	r23, r24
    1184:	88 27       	eor	r24, r24
    1186:	b8 5f       	subi	r27, 0xF8	; 248
    1188:	39 f0       	breq	.+14     	; 0x1198 <__fixunssfsi+0x46>
    118a:	b9 3f       	cpi	r27, 0xF9	; 249
    118c:	cc f3       	brlt	.-14     	; 0x1180 <__fixunssfsi+0x2e>
    118e:	86 95       	lsr	r24
    1190:	77 95       	ror	r23
    1192:	67 95       	ror	r22
    1194:	b3 95       	inc	r27
    1196:	d9 f7       	brne	.-10     	; 0x118e <__fixunssfsi+0x3c>
    1198:	3e f4       	brtc	.+14     	; 0x11a8 <__fixunssfsi+0x56>
    119a:	90 95       	com	r25
    119c:	80 95       	com	r24
    119e:	70 95       	com	r23
    11a0:	61 95       	neg	r22
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	8f 4f       	sbci	r24, 0xFF	; 255
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	08 95       	ret

000011aa <__floatunsisf>:
    11aa:	e8 94       	clt
    11ac:	09 c0       	rjmp	.+18     	; 0x11c0 <__floatsisf+0x12>

000011ae <__floatsisf>:
    11ae:	97 fb       	bst	r25, 7
    11b0:	3e f4       	brtc	.+14     	; 0x11c0 <__floatsisf+0x12>
    11b2:	90 95       	com	r25
    11b4:	80 95       	com	r24
    11b6:	70 95       	com	r23
    11b8:	61 95       	neg	r22
    11ba:	7f 4f       	sbci	r23, 0xFF	; 255
    11bc:	8f 4f       	sbci	r24, 0xFF	; 255
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	99 23       	and	r25, r25
    11c2:	a9 f0       	breq	.+42     	; 0x11ee <__floatsisf+0x40>
    11c4:	f9 2f       	mov	r31, r25
    11c6:	96 e9       	ldi	r25, 0x96	; 150
    11c8:	bb 27       	eor	r27, r27
    11ca:	93 95       	inc	r25
    11cc:	f6 95       	lsr	r31
    11ce:	87 95       	ror	r24
    11d0:	77 95       	ror	r23
    11d2:	67 95       	ror	r22
    11d4:	b7 95       	ror	r27
    11d6:	f1 11       	cpse	r31, r1
    11d8:	f8 cf       	rjmp	.-16     	; 0x11ca <__floatsisf+0x1c>
    11da:	fa f4       	brpl	.+62     	; 0x121a <__floatsisf+0x6c>
    11dc:	bb 0f       	add	r27, r27
    11de:	11 f4       	brne	.+4      	; 0x11e4 <__floatsisf+0x36>
    11e0:	60 ff       	sbrs	r22, 0
    11e2:	1b c0       	rjmp	.+54     	; 0x121a <__floatsisf+0x6c>
    11e4:	6f 5f       	subi	r22, 0xFF	; 255
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
    11e8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	16 c0       	rjmp	.+44     	; 0x121a <__floatsisf+0x6c>
    11ee:	88 23       	and	r24, r24
    11f0:	11 f0       	breq	.+4      	; 0x11f6 <__floatsisf+0x48>
    11f2:	96 e9       	ldi	r25, 0x96	; 150
    11f4:	11 c0       	rjmp	.+34     	; 0x1218 <__floatsisf+0x6a>
    11f6:	77 23       	and	r23, r23
    11f8:	21 f0       	breq	.+8      	; 0x1202 <__floatsisf+0x54>
    11fa:	9e e8       	ldi	r25, 0x8E	; 142
    11fc:	87 2f       	mov	r24, r23
    11fe:	76 2f       	mov	r23, r22
    1200:	05 c0       	rjmp	.+10     	; 0x120c <__floatsisf+0x5e>
    1202:	66 23       	and	r22, r22
    1204:	71 f0       	breq	.+28     	; 0x1222 <__floatsisf+0x74>
    1206:	96 e8       	ldi	r25, 0x86	; 134
    1208:	86 2f       	mov	r24, r22
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	2a f0       	brmi	.+10     	; 0x121a <__floatsisf+0x6c>
    1210:	9a 95       	dec	r25
    1212:	66 0f       	add	r22, r22
    1214:	77 1f       	adc	r23, r23
    1216:	88 1f       	adc	r24, r24
    1218:	da f7       	brpl	.-10     	; 0x1210 <__floatsisf+0x62>
    121a:	88 0f       	add	r24, r24
    121c:	96 95       	lsr	r25
    121e:	87 95       	ror	r24
    1220:	97 f9       	bld	r25, 7
    1222:	08 95       	ret

00001224 <__fp_cmp>:
    1224:	99 0f       	add	r25, r25
    1226:	00 08       	sbc	r0, r0
    1228:	55 0f       	add	r21, r21
    122a:	aa 0b       	sbc	r26, r26
    122c:	e0 e8       	ldi	r30, 0x80	; 128
    122e:	fe ef       	ldi	r31, 0xFE	; 254
    1230:	16 16       	cp	r1, r22
    1232:	17 06       	cpc	r1, r23
    1234:	e8 07       	cpc	r30, r24
    1236:	f9 07       	cpc	r31, r25
    1238:	c0 f0       	brcs	.+48     	; 0x126a <__fp_cmp+0x46>
    123a:	12 16       	cp	r1, r18
    123c:	13 06       	cpc	r1, r19
    123e:	e4 07       	cpc	r30, r20
    1240:	f5 07       	cpc	r31, r21
    1242:	98 f0       	brcs	.+38     	; 0x126a <__fp_cmp+0x46>
    1244:	62 1b       	sub	r22, r18
    1246:	73 0b       	sbc	r23, r19
    1248:	84 0b       	sbc	r24, r20
    124a:	95 0b       	sbc	r25, r21
    124c:	39 f4       	brne	.+14     	; 0x125c <__fp_cmp+0x38>
    124e:	0a 26       	eor	r0, r26
    1250:	61 f0       	breq	.+24     	; 0x126a <__fp_cmp+0x46>
    1252:	23 2b       	or	r18, r19
    1254:	24 2b       	or	r18, r20
    1256:	25 2b       	or	r18, r21
    1258:	21 f4       	brne	.+8      	; 0x1262 <__fp_cmp+0x3e>
    125a:	08 95       	ret
    125c:	0a 26       	eor	r0, r26
    125e:	09 f4       	brne	.+2      	; 0x1262 <__fp_cmp+0x3e>
    1260:	a1 40       	sbci	r26, 0x01	; 1
    1262:	a6 95       	lsr	r26
    1264:	8f ef       	ldi	r24, 0xFF	; 255
    1266:	81 1d       	adc	r24, r1
    1268:	81 1d       	adc	r24, r1
    126a:	08 95       	ret

0000126c <__fp_inf>:
    126c:	97 f9       	bld	r25, 7
    126e:	9f 67       	ori	r25, 0x7F	; 127
    1270:	80 e8       	ldi	r24, 0x80	; 128
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	08 95       	ret

00001278 <__fp_nan>:
    1278:	9f ef       	ldi	r25, 0xFF	; 255
    127a:	80 ec       	ldi	r24, 0xC0	; 192
    127c:	08 95       	ret

0000127e <__fp_pscA>:
    127e:	00 24       	eor	r0, r0
    1280:	0a 94       	dec	r0
    1282:	16 16       	cp	r1, r22
    1284:	17 06       	cpc	r1, r23
    1286:	18 06       	cpc	r1, r24
    1288:	09 06       	cpc	r0, r25
    128a:	08 95       	ret

0000128c <__fp_pscB>:
    128c:	00 24       	eor	r0, r0
    128e:	0a 94       	dec	r0
    1290:	12 16       	cp	r1, r18
    1292:	13 06       	cpc	r1, r19
    1294:	14 06       	cpc	r1, r20
    1296:	05 06       	cpc	r0, r21
    1298:	08 95       	ret

0000129a <__fp_round>:
    129a:	09 2e       	mov	r0, r25
    129c:	03 94       	inc	r0
    129e:	00 0c       	add	r0, r0
    12a0:	11 f4       	brne	.+4      	; 0x12a6 <__fp_round+0xc>
    12a2:	88 23       	and	r24, r24
    12a4:	52 f0       	brmi	.+20     	; 0x12ba <__fp_round+0x20>
    12a6:	bb 0f       	add	r27, r27
    12a8:	40 f4       	brcc	.+16     	; 0x12ba <__fp_round+0x20>
    12aa:	bf 2b       	or	r27, r31
    12ac:	11 f4       	brne	.+4      	; 0x12b2 <__fp_round+0x18>
    12ae:	60 ff       	sbrs	r22, 0
    12b0:	04 c0       	rjmp	.+8      	; 0x12ba <__fp_round+0x20>
    12b2:	6f 5f       	subi	r22, 0xFF	; 255
    12b4:	7f 4f       	sbci	r23, 0xFF	; 255
    12b6:	8f 4f       	sbci	r24, 0xFF	; 255
    12b8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ba:	08 95       	ret

000012bc <__fp_split3>:
    12bc:	57 fd       	sbrc	r21, 7
    12be:	90 58       	subi	r25, 0x80	; 128
    12c0:	44 0f       	add	r20, r20
    12c2:	55 1f       	adc	r21, r21
    12c4:	59 f0       	breq	.+22     	; 0x12dc <__fp_splitA+0x10>
    12c6:	5f 3f       	cpi	r21, 0xFF	; 255
    12c8:	71 f0       	breq	.+28     	; 0x12e6 <__fp_splitA+0x1a>
    12ca:	47 95       	ror	r20

000012cc <__fp_splitA>:
    12cc:	88 0f       	add	r24, r24
    12ce:	97 fb       	bst	r25, 7
    12d0:	99 1f       	adc	r25, r25
    12d2:	61 f0       	breq	.+24     	; 0x12ec <__fp_splitA+0x20>
    12d4:	9f 3f       	cpi	r25, 0xFF	; 255
    12d6:	79 f0       	breq	.+30     	; 0x12f6 <__fp_splitA+0x2a>
    12d8:	87 95       	ror	r24
    12da:	08 95       	ret
    12dc:	12 16       	cp	r1, r18
    12de:	13 06       	cpc	r1, r19
    12e0:	14 06       	cpc	r1, r20
    12e2:	55 1f       	adc	r21, r21
    12e4:	f2 cf       	rjmp	.-28     	; 0x12ca <__fp_split3+0xe>
    12e6:	46 95       	lsr	r20
    12e8:	f1 df       	rcall	.-30     	; 0x12cc <__fp_splitA>
    12ea:	08 c0       	rjmp	.+16     	; 0x12fc <__fp_splitA+0x30>
    12ec:	16 16       	cp	r1, r22
    12ee:	17 06       	cpc	r1, r23
    12f0:	18 06       	cpc	r1, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	f1 cf       	rjmp	.-30     	; 0x12d8 <__fp_splitA+0xc>
    12f6:	86 95       	lsr	r24
    12f8:	71 05       	cpc	r23, r1
    12fa:	61 05       	cpc	r22, r1
    12fc:	08 94       	sec
    12fe:	08 95       	ret

00001300 <__fp_zero>:
    1300:	e8 94       	clt

00001302 <__fp_szero>:
    1302:	bb 27       	eor	r27, r27
    1304:	66 27       	eor	r22, r22
    1306:	77 27       	eor	r23, r23
    1308:	cb 01       	movw	r24, r22
    130a:	97 f9       	bld	r25, 7
    130c:	08 95       	ret

0000130e <__gesf2>:
    130e:	8a df       	rcall	.-236    	; 0x1224 <__fp_cmp>
    1310:	08 f4       	brcc	.+2      	; 0x1314 <__gesf2+0x6>
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	08 95       	ret

00001316 <__mulsf3>:
    1316:	0b d0       	rcall	.+22     	; 0x132e <__mulsf3x>
    1318:	c0 cf       	rjmp	.-128    	; 0x129a <__fp_round>
    131a:	b1 df       	rcall	.-158    	; 0x127e <__fp_pscA>
    131c:	28 f0       	brcs	.+10     	; 0x1328 <__mulsf3+0x12>
    131e:	b6 df       	rcall	.-148    	; 0x128c <__fp_pscB>
    1320:	18 f0       	brcs	.+6      	; 0x1328 <__mulsf3+0x12>
    1322:	95 23       	and	r25, r21
    1324:	09 f0       	breq	.+2      	; 0x1328 <__mulsf3+0x12>
    1326:	a2 cf       	rjmp	.-188    	; 0x126c <__fp_inf>
    1328:	a7 cf       	rjmp	.-178    	; 0x1278 <__fp_nan>
    132a:	11 24       	eor	r1, r1
    132c:	ea cf       	rjmp	.-44     	; 0x1302 <__fp_szero>

0000132e <__mulsf3x>:
    132e:	c6 df       	rcall	.-116    	; 0x12bc <__fp_split3>
    1330:	a0 f3       	brcs	.-24     	; 0x131a <__mulsf3+0x4>

00001332 <__mulsf3_pse>:
    1332:	95 9f       	mul	r25, r21
    1334:	d1 f3       	breq	.-12     	; 0x132a <__mulsf3+0x14>
    1336:	95 0f       	add	r25, r21
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	55 1f       	adc	r21, r21
    133c:	62 9f       	mul	r22, r18
    133e:	f0 01       	movw	r30, r0
    1340:	72 9f       	mul	r23, r18
    1342:	bb 27       	eor	r27, r27
    1344:	f0 0d       	add	r31, r0
    1346:	b1 1d       	adc	r27, r1
    1348:	63 9f       	mul	r22, r19
    134a:	aa 27       	eor	r26, r26
    134c:	f0 0d       	add	r31, r0
    134e:	b1 1d       	adc	r27, r1
    1350:	aa 1f       	adc	r26, r26
    1352:	64 9f       	mul	r22, r20
    1354:	66 27       	eor	r22, r22
    1356:	b0 0d       	add	r27, r0
    1358:	a1 1d       	adc	r26, r1
    135a:	66 1f       	adc	r22, r22
    135c:	82 9f       	mul	r24, r18
    135e:	22 27       	eor	r18, r18
    1360:	b0 0d       	add	r27, r0
    1362:	a1 1d       	adc	r26, r1
    1364:	62 1f       	adc	r22, r18
    1366:	73 9f       	mul	r23, r19
    1368:	b0 0d       	add	r27, r0
    136a:	a1 1d       	adc	r26, r1
    136c:	62 1f       	adc	r22, r18
    136e:	83 9f       	mul	r24, r19
    1370:	a0 0d       	add	r26, r0
    1372:	61 1d       	adc	r22, r1
    1374:	22 1f       	adc	r18, r18
    1376:	74 9f       	mul	r23, r20
    1378:	33 27       	eor	r19, r19
    137a:	a0 0d       	add	r26, r0
    137c:	61 1d       	adc	r22, r1
    137e:	23 1f       	adc	r18, r19
    1380:	84 9f       	mul	r24, r20
    1382:	60 0d       	add	r22, r0
    1384:	21 1d       	adc	r18, r1
    1386:	82 2f       	mov	r24, r18
    1388:	76 2f       	mov	r23, r22
    138a:	6a 2f       	mov	r22, r26
    138c:	11 24       	eor	r1, r1
    138e:	9f 57       	subi	r25, 0x7F	; 127
    1390:	50 40       	sbci	r21, 0x00	; 0
    1392:	8a f0       	brmi	.+34     	; 0x13b6 <__mulsf3_pse+0x84>
    1394:	e1 f0       	breq	.+56     	; 0x13ce <__mulsf3_pse+0x9c>
    1396:	88 23       	and	r24, r24
    1398:	4a f0       	brmi	.+18     	; 0x13ac <__mulsf3_pse+0x7a>
    139a:	ee 0f       	add	r30, r30
    139c:	ff 1f       	adc	r31, r31
    139e:	bb 1f       	adc	r27, r27
    13a0:	66 1f       	adc	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	88 1f       	adc	r24, r24
    13a6:	91 50       	subi	r25, 0x01	; 1
    13a8:	50 40       	sbci	r21, 0x00	; 0
    13aa:	a9 f7       	brne	.-22     	; 0x1396 <__mulsf3_pse+0x64>
    13ac:	9e 3f       	cpi	r25, 0xFE	; 254
    13ae:	51 05       	cpc	r21, r1
    13b0:	70 f0       	brcs	.+28     	; 0x13ce <__mulsf3_pse+0x9c>
    13b2:	5c cf       	rjmp	.-328    	; 0x126c <__fp_inf>
    13b4:	a6 cf       	rjmp	.-180    	; 0x1302 <__fp_szero>
    13b6:	5f 3f       	cpi	r21, 0xFF	; 255
    13b8:	ec f3       	brlt	.-6      	; 0x13b4 <__mulsf3_pse+0x82>
    13ba:	98 3e       	cpi	r25, 0xE8	; 232
    13bc:	dc f3       	brlt	.-10     	; 0x13b4 <__mulsf3_pse+0x82>
    13be:	86 95       	lsr	r24
    13c0:	77 95       	ror	r23
    13c2:	67 95       	ror	r22
    13c4:	b7 95       	ror	r27
    13c6:	f7 95       	ror	r31
    13c8:	e7 95       	ror	r30
    13ca:	9f 5f       	subi	r25, 0xFF	; 255
    13cc:	c1 f7       	brne	.-16     	; 0x13be <__mulsf3_pse+0x8c>
    13ce:	fe 2b       	or	r31, r30
    13d0:	88 0f       	add	r24, r24
    13d2:	91 1d       	adc	r25, r1
    13d4:	96 95       	lsr	r25
    13d6:	87 95       	ror	r24
    13d8:	97 f9       	bld	r25, 7
    13da:	08 95       	ret

000013dc <__divmodhi4>:
    13dc:	97 fb       	bst	r25, 7
    13de:	07 2e       	mov	r0, r23
    13e0:	16 f4       	brtc	.+4      	; 0x13e6 <__divmodhi4+0xa>
    13e2:	00 94       	com	r0
    13e4:	06 d0       	rcall	.+12     	; 0x13f2 <__divmodhi4_neg1>
    13e6:	77 fd       	sbrc	r23, 7
    13e8:	08 d0       	rcall	.+16     	; 0x13fa <__divmodhi4_neg2>
    13ea:	27 d0       	rcall	.+78     	; 0x143a <__udivmodhi4>
    13ec:	07 fc       	sbrc	r0, 7
    13ee:	05 d0       	rcall	.+10     	; 0x13fa <__divmodhi4_neg2>
    13f0:	3e f4       	brtc	.+14     	; 0x1400 <__divmodhi4_exit>

000013f2 <__divmodhi4_neg1>:
    13f2:	90 95       	com	r25
    13f4:	81 95       	neg	r24
    13f6:	9f 4f       	sbci	r25, 0xFF	; 255
    13f8:	08 95       	ret

000013fa <__divmodhi4_neg2>:
    13fa:	70 95       	com	r23
    13fc:	61 95       	neg	r22
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255

00001400 <__divmodhi4_exit>:
    1400:	08 95       	ret

00001402 <__divmodsi4>:
    1402:	05 2e       	mov	r0, r21
    1404:	97 fb       	bst	r25, 7
    1406:	16 f4       	brtc	.+4      	; 0x140c <__divmodsi4+0xa>
    1408:	00 94       	com	r0
    140a:	0f d0       	rcall	.+30     	; 0x142a <__negsi2>
    140c:	57 fd       	sbrc	r21, 7
    140e:	05 d0       	rcall	.+10     	; 0x141a <__divmodsi4_neg2>
    1410:	28 d0       	rcall	.+80     	; 0x1462 <__udivmodsi4>
    1412:	07 fc       	sbrc	r0, 7
    1414:	02 d0       	rcall	.+4      	; 0x141a <__divmodsi4_neg2>
    1416:	46 f4       	brtc	.+16     	; 0x1428 <__divmodsi4_exit>
    1418:	08 c0       	rjmp	.+16     	; 0x142a <__negsi2>

0000141a <__divmodsi4_neg2>:
    141a:	50 95       	com	r21
    141c:	40 95       	com	r20
    141e:	30 95       	com	r19
    1420:	21 95       	neg	r18
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
    1424:	4f 4f       	sbci	r20, 0xFF	; 255
    1426:	5f 4f       	sbci	r21, 0xFF	; 255

00001428 <__divmodsi4_exit>:
    1428:	08 95       	ret

0000142a <__negsi2>:
    142a:	90 95       	com	r25
    142c:	80 95       	com	r24
    142e:	70 95       	com	r23
    1430:	61 95       	neg	r22
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	8f 4f       	sbci	r24, 0xFF	; 255
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	08 95       	ret

0000143a <__udivmodhi4>:
    143a:	aa 1b       	sub	r26, r26
    143c:	bb 1b       	sub	r27, r27
    143e:	51 e1       	ldi	r21, 0x11	; 17
    1440:	07 c0       	rjmp	.+14     	; 0x1450 <__udivmodhi4_ep>

00001442 <__udivmodhi4_loop>:
    1442:	aa 1f       	adc	r26, r26
    1444:	bb 1f       	adc	r27, r27
    1446:	a6 17       	cp	r26, r22
    1448:	b7 07       	cpc	r27, r23
    144a:	10 f0       	brcs	.+4      	; 0x1450 <__udivmodhi4_ep>
    144c:	a6 1b       	sub	r26, r22
    144e:	b7 0b       	sbc	r27, r23

00001450 <__udivmodhi4_ep>:
    1450:	88 1f       	adc	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	5a 95       	dec	r21
    1456:	a9 f7       	brne	.-22     	; 0x1442 <__udivmodhi4_loop>
    1458:	80 95       	com	r24
    145a:	90 95       	com	r25
    145c:	bc 01       	movw	r22, r24
    145e:	cd 01       	movw	r24, r26
    1460:	08 95       	ret

00001462 <__udivmodsi4>:
    1462:	a1 e2       	ldi	r26, 0x21	; 33
    1464:	1a 2e       	mov	r1, r26
    1466:	aa 1b       	sub	r26, r26
    1468:	bb 1b       	sub	r27, r27
    146a:	fd 01       	movw	r30, r26
    146c:	0d c0       	rjmp	.+26     	; 0x1488 <__udivmodsi4_ep>

0000146e <__udivmodsi4_loop>:
    146e:	aa 1f       	adc	r26, r26
    1470:	bb 1f       	adc	r27, r27
    1472:	ee 1f       	adc	r30, r30
    1474:	ff 1f       	adc	r31, r31
    1476:	a2 17       	cp	r26, r18
    1478:	b3 07       	cpc	r27, r19
    147a:	e4 07       	cpc	r30, r20
    147c:	f5 07       	cpc	r31, r21
    147e:	20 f0       	brcs	.+8      	; 0x1488 <__udivmodsi4_ep>
    1480:	a2 1b       	sub	r26, r18
    1482:	b3 0b       	sbc	r27, r19
    1484:	e4 0b       	sbc	r30, r20
    1486:	f5 0b       	sbc	r31, r21

00001488 <__udivmodsi4_ep>:
    1488:	66 1f       	adc	r22, r22
    148a:	77 1f       	adc	r23, r23
    148c:	88 1f       	adc	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	1a 94       	dec	r1
    1492:	69 f7       	brne	.-38     	; 0x146e <__udivmodsi4_loop>
    1494:	60 95       	com	r22
    1496:	70 95       	com	r23
    1498:	80 95       	com	r24
    149a:	90 95       	com	r25
    149c:	9b 01       	movw	r18, r22
    149e:	ac 01       	movw	r20, r24
    14a0:	bd 01       	movw	r22, r26
    14a2:	cf 01       	movw	r24, r30
    14a4:	08 95       	ret

000014a6 <_exit>:
    14a6:	f8 94       	cli

000014a8 <__stop_program>:
    14a8:	ff cf       	rjmp	.-2      	; 0x14a8 <__stop_program>
